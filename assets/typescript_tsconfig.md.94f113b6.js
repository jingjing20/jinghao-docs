import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const o="/assets/image.c260b11e.png",p="/assets/image-1.6279e5f7.png",e="/assets/image-2.1782be72.png",C=JSON.parse('{"title":"tsconfig.json","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/tsconfig.md","filePath":"typescript/tsconfig.md","lastUpdated":1692717238000}'),t={name:"typescript/tsconfig.md"},c=l(`<h1 id="tsconfig-json" tabindex="-1">tsconfig.json <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;tsconfig.json&quot;">​</a></h1><h2 id="tsconfig-json-是什么" tabindex="-1">tsconfig.json 是什么？ <a class="header-anchor" href="#tsconfig-json-是什么" aria-label="Permalink to &quot;tsconfig.json 是什么？&quot;">​</a></h2><ul><li><code>tsconfig.json</code> 是 TypeScript 项目中的配置文件，用于配置 TypeScript 编译器的行为和设置。</li><li>在 TypeScript 项目中，<code>tsconfig.json</code> 文件是必须的，因为它告诉 TypeScript 编译器如何编译项目中的文件。</li><li>当一个目录中存在 tsconfig.json 文件，则认为该目录为 TypeScript 项目的根目录。</li><li>通常 tsconfig.json 文件配置主要包含两部分功能： <ul><li>1、指定待编译文件</li><li>2、定义编译选项</li></ul></li></ul><h2 id="tsconfig-的顶层配置属性" tabindex="-1">tsconfig 的顶层配置属性 <a class="header-anchor" href="#tsconfig-的顶层配置属性" aria-label="Permalink to &quot;tsconfig 的顶层配置属性&quot;">​</a></h2><h3 id="compileroptions" tabindex="-1"><strong>compilerOptions</strong> <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;**compilerOptions**&quot;">​</a></h3><ul><li>这是最重要的属性之一，用于配置 TypeScript 编译器的选项。</li><li>你可以在这里设置编译的目标版本、模块系统、严格类型检查、输出目录等等。例如：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ES2020</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CommonJS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>完整配置项可以上官网查看 <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noreferrer">tsconfig</a></li></ul><h3 id="extends" tabindex="-1"><strong>extends</strong> <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;**extends**&quot;">​</a></h3><ul><li>允许你继承另一个 TypeScript 配置文件的设置。这对于在多个项目之间共享通用配置非常有用。</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./base-tsconfig.json</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="include-和-exclude" tabindex="-1"><strong>include</strong> 和 <strong>exclude</strong> <a class="header-anchor" href="#include-和-exclude" aria-label="Permalink to &quot;**include** 和 **exclude**&quot;">​</a></h3><ul><li>用于指定要编译的文件或目录的匹配模式。<code>include</code> 表示要包含的文件，<code>exclude</code> 表示要排除的文件。</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="files" tabindex="-1"><strong>files</strong>： <a class="header-anchor" href="#files" aria-label="Permalink to &quot;**files**：&quot;">​</a></h3><p>直接指定要编译的文件列表，而不是使用匹配模式。这在项目较小且文件较少时比较适用。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/app.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/utils.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="references" tabindex="-1"><strong>references</strong> <a class="header-anchor" href="#references" aria-label="Permalink to &quot;**references**&quot;">​</a></h3><p>用于配置项目之间的引用关系，例如基于项目的构建顺序。这在大型多模块项目中很有用。</p><h4 id="实例理解一下" tabindex="-1">实例理解一下 <a class="header-anchor" href="#实例理解一下" aria-label="Permalink to &quot;实例理解一下&quot;">​</a></h4><ul><li>假设文件结构如下：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./</span></span>
<span class="line"><span style="color:#FFCB6B;">├─my-lib</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">├─tsconfig.json</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">├─src</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">└index.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">├─my-app</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">├─tsconfig.json</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">├─src</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">└index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>my-lib 的 tsconfig.json 文件：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">composite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">declaration</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>my-app 的 tsconfig.json 文件：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">declaration</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">references</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../my-lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>my-lib 中的 composite 选项必须设置为 true，my-app 的 references 选项才生效。</p></div><p><img src="`+o+`" alt="composite"></p><h4 id="composite-配置项起到的作用" tabindex="-1"><strong>composite</strong> 配置项起到的作用 <a class="header-anchor" href="#composite-配置项起到的作用" aria-label="Permalink to &quot;**composite** 配置项起到的作用&quot;">​</a></h4><ul><li><p><code>composite</code> 配置项是 TypeScript 编译器中的一个选项，用于开启一种增量编译和项目引用的优化机制。当你在 TypeScript 项目的 <code>tsconfig.json</code> 文件中将 <code>composite</code> 设置为 <code>true</code> 时，就启用了这种机制。</p></li><li><p><code>composite</code> 的作用主要有两个方面：</p></li></ul><div class="info custom-block"><p class="custom-block-title"><code>composite</code> 的作用</p><ul><li><p>1、 <strong>增量编译</strong>： 在启用 <code>composite</code> 的情况下，TypeScript 编译器会对项目中的源文件进行增量编译，而不是每次都重新编译所有文件。这意味着当你修改了一个文件时，编译器只会重新编译与该文件相关联的文件，而不是整个项目。这可以大大提高编译的速度，特别是在大型项目中。</p></li><li><p>2、 <strong>项目引用</strong>： <code>composite</code> 还允许你在项目间建立引用关系，通过使用 <code>references</code> 配置项。这意味着你可以告诉编译器一个项目依赖于另一个项目，并确保它们按正确的顺序进行编译。这对于管理复杂的多模块项目非常有用，可以避免编译顺序错误和类型问题。</p></li></ul></div><ul><li><code>composite</code> 配置项设置为 <code>true</code> 之后，编译完后会生成一个 <code>tsconfig.tsbuildinfo</code> 文件，这个文件是 TypeScript 编译器在进行增量编译时的一个辅助文件，用于跟踪文件之间的依赖关系和编译状态，以便更高效地进行增量编译。</li></ul><div class="info custom-block"><p class="custom-block-title"><code>tsconfig.tsbuildinfo</code> 的作用</p><ul><li><p>跟踪依赖关系：当你启用 composite 编译选项并在项目中使用项目引用时，编译器需要知道哪些文件依赖于其他文件，以便在发生更改时只重新编译相关的文件。<code>tsconfig.tsbuildinfo</code> 文件记录了文件之间的依赖关系，以便编译器可以在下一次编译时快速确定需要重新编译的文件。</p></li><li><p>增量编译状态：<code>tsconfig.tsbuildinfo</code> 文件还包含了先前编译的状态信息，例如每个文件的时间戳、版本号等。这些信息用于比较现有文件与上一次编译的版本，以确定哪些文件需要重新编译，哪些文件可以保持不变。</p></li><li><p>提高编译性能：借助 <code>tsconfig.tsbuildinfo</code> 文件，TypeScript 编译器可以在增量编译过程中更精确地确定需要重新编译的文件，从而避免不必要的重复编译，提高了编译的效率。</p></li></ul></div><h4 id="composite-vs-incremental" tabindex="-1"><strong>composite</strong> VS <strong>incremental</strong> <a class="header-anchor" href="#composite-vs-incremental" aria-label="Permalink to &quot;**composite** VS **incremental**&quot;">​</a></h4><ul><li>incremental 编译选项也是 TypeScript 中用于优化增量编译的一个配置项。它与 composite 编译选项有些类似，但是它们有一些区别。</li></ul><div class="info custom-block"><p class="custom-block-title">不同之处</p><ul><li><p><strong><code>incremental</code> 编译选项</strong>： 当你将 <code>incremental</code> 编译选项设置为 <code>true</code> 时，TypeScript 编译器会在增量编译过程中生成 <code>.tsbuildinfo</code> 文件，这个文件用于记录编译过程中的信息，包括文件之间的依赖关系、类型信息、编译状态等。这样，在下一次编译时，编译器可以使用这些信息来做增量的、更高效的编译。</p></li><li><p><strong><code>composite</code> 编译选项</strong>： 当你使用 <code>composite</code> 编译选项时，不仅会启用 <code>incremental</code> 编译，还会额外启用项目引用的机制，通过 <code>references</code> 配置项来管理项目之间的依赖关系。这意味着你可以告诉编译器哪些项目依赖于其他项目，并确保正确的编译顺序。<code>composite</code> 编译选项适用于大型多模块项目，可以更好地管理项目之间的关系。</p></li></ul></div><p>虽然 <code>incremental</code> 和 <code>composite</code> 都可以用于优化增量编译，但是 <code>composite</code> 更加强大，适用于管理项目之间的引用关系。如果你只是希望优化增量编译，可以将 <code>incremental</code> 设置为 <code>true</code>，而如果需要处理项目之间的依赖关系，可以结合使用 <code>composite</code> 和 <code>references</code> 配置。</p><h4 id="实例测试一下增量编译" tabindex="-1">实例测试一下增量编译 <a class="header-anchor" href="#实例测试一下增量编译" aria-label="Permalink to &quot;实例测试一下增量编译&quot;">​</a></h4><ul><li>还是以上面的 my-lib 和 my-app 为例，假设初始 my-lib 中的 index.ts 文件内容如下：</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// my-lib/src/index.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> calc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>先编译一次</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app/tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+p+`" alt="Alt text"></p><ul><li><p>如图所示因为之前已经编译过，同时文件没有变化，所以不会重新编译。这些功能都是通过 <code>tsconfig.tsbuildinfo</code> 文件来实现的。</p></li><li><p>修改 my-lib 中的 index.ts 文件：</p></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// my-lib/src/index.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> calc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">999</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>再编译一次</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app/tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+e+`" alt="Alt text"></p><ul><li><p>如图所示，因为 my-lib 中的 index.ts 文件发生了变化，所以会重新编译 my-lib，但是 my-app 显示的是 <code>is up to date</code> 意思是 <code>已是最新</code></p></li><li><p>这就是增量编译</p></li></ul><h3 id="excludefiles" tabindex="-1"><strong>excludeFiles</strong> <a class="header-anchor" href="#excludefiles" aria-label="Permalink to &quot;**excludeFiles**&quot;">​</a></h3><p>指定一个数组，包含了应该从编译过程中排除的文件。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">excludeFiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/temporary.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="compileonsave" tabindex="-1"><strong>compileOnSave</strong> <a class="header-anchor" href="#compileonsave" aria-label="Permalink to &quot;**compileOnSave**&quot;">​</a></h3><p>是否在保存文件时自动触发编译。设置为 <code>true</code> 时，在保存文件时会自动重新编译。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compileOnSave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="typeacquisition-【基本用不到】" tabindex="-1"><strong>typeAcquisition</strong> 【基本用不到】 <a class="header-anchor" href="#typeacquisition-【基本用不到】" aria-label="Permalink to &quot;**typeAcquisition** 【基本用不到】&quot;">​</a></h3><ul><li>用于自动获取 TypeScript 类型声明文件（<code>.d.ts</code> 文件）的设置。</li><li>配置 typeAcquisition 对象用于控制 TypeScript 的自动类型获取。</li><li>它并不会为您自动安装 @types 包。相反，它会在 Visual Studio 和 Visual Studio Code 等支持的编辑器和 IDE 中自动下载并导入类型定义。</li><li>然而，当您实际运行 TypeScript 编译器时（例如，通过运行 tsc 命令），编译器可能无法找到这些类型定义。要解决此问题，您需要手动安装相应的 @types 包。</li><li>比如说下面的配置：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typeAcquisition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">enable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>这样可以让你不安装 <code>@types/lodash</code> 这个包就能在项目中正常使用 Typescript 的提示，但是当你运行项目的时候还是会报错，因为编译器找不到这个包，所以你还是需要安装 <code>@types/lodash</code> 这个包。</li><li>。。。。。。。。。</li></ul><h2 id="配置项暂存【网上找的】" tabindex="-1">配置项暂存【网上找的】 <a class="header-anchor" href="#配置项暂存【网上找的】" aria-label="Permalink to &quot;配置项暂存【网上找的】&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  ]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//只编译的文件</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./test.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  ]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//除了[]中的文件，编译其他所有文件</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 编译过程中一些编译的属性或者编译的配置</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Visit https://www.typescriptlang.org/tsconfig to read more about this file */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Projects */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">incremental</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                       			</span><span style="color:#676E95;font-style:italic;">/* 启用增量编译 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">composite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                                	</span><span style="color:#676E95;font-style:italic;">/* 启用允许将类型脚脚本项目与项目引用一起使用的约束 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">tsBuildInfoFile</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                          	</span><span style="color:#676E95;font-style:italic;">/* 指定.tsbuildinfo增量编译文件的文件夹。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">disableSolutionSearching</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                 	</span><span style="color:#676E95;font-style:italic;">/* 在编辑时，选择一个项目退出多项目引用检查。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">disableReferencedProjectLoad</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">             	</span><span style="color:#676E95;font-style:italic;">/* 减少通过类型脚本自动加载的项目数量。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Language and Environment */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">es2016</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">									</span><span style="color:#676E95;font-style:italic;">/* 为发出的JavaScript设置JavaScript语言版本，并包含兼容的库声明 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                                        	</span><span style="color:#676E95;font-style:italic;">/* 指定一组描述目标运行时环境的捆绑库声明文件 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">jsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                                	</span><span style="color:#676E95;font-style:italic;">/* 指定生成的JSX代码 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">experimentalDecorators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                   	</span><span style="color:#676E95;font-style:italic;">/* 为TC39第二阶段的草稿装饰器提供实验支持。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">emitDecoratorMetadata</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                    	</span><span style="color:#676E95;font-style:italic;">/* 为源文件中的修饰声明的设计类型元数据 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">jsxFactory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                     			 	</span><span style="color:#676E95;font-style:italic;">/* 指定针对ReactJSX发射时使用的JSX工厂函数，例如“React.createElement”或“h” */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">jsxFragmentFactory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">             </span><span style="color:#676E95;font-style:italic;">/* 指定用于片段的JSX片段引用例如：React.Fragment&#39; or &#39;Fragment. */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">jsxImportSource</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                </span><span style="color:#676E95;font-style:italic;">/* 指定用于在使用\`jsx时导入JSX工厂函数的模块说明符：反应-jsx*\`.\`  */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">reactNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                             </span><span style="color:#676E95;font-style:italic;">/* 指定为\`创建元素\`调用的对象。这只适用于针对\`，\`JSX emit。*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">noLib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                                    </span><span style="color:#676E95;font-style:italic;">/* 禁用包括任何库文件，包括默认的lib.d.ts。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">useDefineForClassFields</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                  </span><span style="color:#676E95;font-style:italic;">/* emit ECMAScript-符合标准的类字段。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Modules */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">commonjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* 指定所生成的模块代码。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* 在源文件中指定根文件夹。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* 指定TypeScript如何从给定的模块指定符中查找文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* 指定要解析非相对模块名称的基本目录。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;paths&quot;: {},                                      /* 指定一组将导入重新映射到其他查找位置的条目。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;rootDirs&quot;: [],                                   /* 在解析模块时，允许将多个文件夹视为一个文件夹。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;typeRoots&quot;: [],                                  /* 指定多个类似于\`./node_modules/@的\`类型的文件夹。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;types&quot;: [],                                      /* 指定要在源文件中引用的类型包名。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;allowUmdGlobalAccess&quot;: true,                     /* 允许从模块访问UMD全局文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;resolveJsonModule&quot;: true,                        /* 启用导入.json文件 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noResolve&quot;: true,                                /* 不允许\`import\`，\`require\`或\`reference\`来扩展类型应该添加到项目的文件数量。*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* JavaScript Support */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;allowJs&quot;: true,                                  /* 允许JavaScript文件成为您的程序的一部分。使用\`检查JS\`选项从这些文件中获取错误。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;checkJs&quot;: true,                                  /* 在已检查类型的JavaScript文件中启用错误报告。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* 指定用于从\`node_modules\`中检查JavaScript文件的最大文件夹深度。仅适用于\`允许的Js\`。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Emit */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;declaration&quot;: true,                              /* 从项目中的typeScript和JavaScript文件生成.d.ts文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;declarationMap&quot;: true,                           /* 为d.ts文件创建源集映射。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;emitDeclarationOnly&quot;: true,                      /* 只输出d.ts文件，而不输出JavaScript文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;sourceMap&quot;: true,                                /* 为发出的JavaScript文件创建源映射文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;outFile&quot;: &quot;./&quot;,                                  /* 指定一个将所有输出捆绑到一个JavaScript文件中的文件。如果\`声明\`为true，则还指定一个捆绑所有.d.ts输出的文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;outDir&quot;: &quot;./&quot;,                                   /* 为所有发出的文件指定一个输出文件夹。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;removeComments&quot;: true,                           /* 去除注释 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noEmit&quot;: true,                                   /* 从编译中禁用emit文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;importHelpers&quot;: true,                            /* 允许从每个项目的tslib中导入一次助手函数，而不是为每个文件包含它们。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* 为仅用于类型的导入指定发射/检查行为 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;downlevelIteration&quot;: true,                       /* Emit 更兼容，但冗长和性能较差的JavaScript的迭代。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* 为调试器指定根路径以查找引用源代码的位置。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;inlineSourceMap&quot;: true,                          /* 在发出的JavaScript中包含源源映射文件。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;inlineSources&quot;: true,                            /* 在发出的JavaScript中的源映射中包含源代码。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;emitBOM&quot;: true,                                  /* 在输出文件的开头发出UTF-8字节顺序标记(BOM)。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* 设置发射文件的换行符。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;stripInternal&quot;: true,                            /* 禁用在其JSDoc注释中具有\`@internal\`的发射声明。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noEmitHelpers&quot;: true,                            /* 禁用在编译输出中生成自定义助手函数。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noEmitOnError&quot;: true,                            /* 如果报告了任何类型检查错误，则禁用发射文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;preserveConstEnums&quot;: true,                       /* 禁用擦除生成的代码中的\`常数枚举\`声明。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* 为生成的声明文件的输出目录。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;preserveValueImports&quot;: true,                     /* 在JavaScript输出中保留未使用的导入值，否则将被删除。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Interop Constraints */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;isolatedModules&quot;: true,                          /* 确保每个文件都可以安全地传输，而不依赖于其他导入。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;allowSyntheticDefaultImports&quot;: true,             /* 当模块没有默认导出时，允许“从y导入x”。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">esModuleInterop</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> 							 </span><span style="color:#676E95;font-style:italic;">/* 发出额外的JavaScript，以简化对导入CommonJS模块的支持。这使得\`允许合成默认导入\`以实现类型兼容性。    */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;preserveSymlinks&quot;: true,                         /* 禁用对符号链接到其实际路径的解析。这与节点中的同一标志相关联。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Type Checking */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">                                   	 </span><span style="color:#676E95;font-style:italic;">/* Enable all strict type-checking options. */</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//strict为true,代表下面的都是true</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//不要求必须显示的设置any</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noImplicitAny&quot;: true,                            /*为隐含\`任何\`类型的表达式和声明启用错误报告  */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//不强制进行null监测</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;strictNullChecks&quot;: true,                         /* 在类型检查时，考虑\`null\`和\`未定义\`。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;strictFunctionTypes&quot;: true,                      /* 在分配函数时，请检查以确保参数和返回值与子类型兼容 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;strictBindCallApply&quot;: true,                      /* 检查\`绑定\`、\`调用\`和\`应用\`方法的参数是否与原始函数匹配。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;strictPropertyInitialization&quot;: true,             /* 检查在构造函数中已声明但未设置的类属性。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noImplicitThis&quot;: true,                           /* 当\`this\`具有类型\`any\`时，启用错误报告。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;useUnknownInCatchVariables&quot;: true,               /* 将catch子句变量类型化为“unknown”，而不是“any”。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;alwaysStrict&quot;: true,                             /* 确保始终发出“严格使用”信号。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noUnusedLocals&quot;: true,                           /* 在未读取局部变量时启用错误报告。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noUnusedParameters&quot;: true,                       /* 在未读取函数参数时引发错误 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;exactOptionalPropertyTypes&quot;: true,               /* 将可选的属性类型解释为已写入的，而不是添加“未定义的”。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noImplicitReturns&quot;: true,                        /* 为不在函数中显式返回的代码路径启用错误报告。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* 为开关语句中的故障情况启用错误报告。*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* 在索引签名结果中包含“未定义的”*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noImplicitOverride&quot;: true,                       /* 确保在派生类中标记覆盖成员。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* 对使用索引类型声明的密钥强制使用索引访问器 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;allowUnusedLabels&quot;: true,                        /* 禁用对未使用的标签的错误报告。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;allowUnreachableCode&quot;: true,                     /* 禁用对不可达代码的错误报告。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* Completeness */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;skipDefaultLibCheck&quot;: true,                      /* 跳过类型检查。d.ts类型脚本中包含的ts文件。 */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// &quot;skipLibCheck&quot;: true 							 /* 跳过类型检查所有。d.ts文件。 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br></div></div>`,61),r=[c];function i(y,F,D,u,b,d){return n(),a("div",null,r)}const q=s(t,[["render",i]]);export{C as __pageData,q as default};
