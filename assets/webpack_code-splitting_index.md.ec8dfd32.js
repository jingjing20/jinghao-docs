import{_ as e,o as a,c as o,V as l}from"./chunks/framework.364d6ed5.js";const s="/assets/image.67a12374.png",c="/assets/image-1.6f0f4234.png",t="/assets/image-2.04c6fcf9.png",d="/assets/image-3.b65c40bb.png",i="/assets/image-4.5b7bf570.png",q=JSON.parse('{"title":"code-splitting","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/code-splitting/index.md","filePath":"webpack/code-splitting/index.md","lastUpdated":1699323787000}'),n={name:"webpack/code-splitting/index.md"},r=l('<h1 id="code-splitting" tabindex="-1">code-splitting <a class="header-anchor" href="#code-splitting" aria-label="Permalink to &quot;code-splitting&quot;">​</a></h1><blockquote><p>记一次调整项目 babel 配置后 webpack 的 code-splitting 失效问题</p></blockquote><h2 id="问题产生背景" tabindex="-1">问题产生背景 <a class="header-anchor" href="#问题产生背景" aria-label="Permalink to &quot;问题产生背景&quot;">​</a></h2><ul><li>某天我们同事需要实现一个业务需求，引入了某个工具包 <code>xxx</code></li><li>然后在使用这个工具包的时候发现有点问题</li><li>查阅文档说需要把项目中的 <code>babel</code> 的 <code>modules</code> 属性配置调整一下, 使用 <code>commonjs</code> 模式</li><li>同事调整完之后发现这个库确实好使了，业务需求实现了，产品很满意</li></ul><h2 id="爆雷" tabindex="-1">爆雷 <a class="header-anchor" href="#爆雷" aria-label="Permalink to &quot;爆雷&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li><p>又是某个工作日的下午，我们老大发现我们的项目加载有点慢，打开控制台看了下发现我们的项目首页加载的 <code>js</code> 文件很大，压缩完的都有 <code>十多兆</code> ，源文件直接好 <code>几十兆</code>...然后就找我们沟通情况、排查问题、尽快解决问题。</p></li><li><p>然后我们小组几个铁子就立马开始排查问题产生的原因了...</p></li></ul></div><h2 id="问题排查" tabindex="-1">问题排查 <a class="header-anchor" href="#问题排查" aria-label="Permalink to &quot;问题排查&quot;">​</a></h2><h3 id="本地复现" tabindex="-1">本地复现 <a class="header-anchor" href="#本地复现" aria-label="Permalink to &quot;本地复现&quot;">​</a></h3><ul><li>我先在本地执行 <code>build</code> 命令把项目构建成功之后</li><li>发现 <code>dist</code> 里面的 <code>js</code> 文件夹里面只有下图这些 <code>js</code> 文件</li><li><code>app.10721af9.js</code> 大小为 <span style="color:red;">22MB...</span></li><li><code>vendors.10721af9</code> 大小为 <span style="color:red;">34MB...</span></li></ul><p><img src="'+s+'" alt="Alt text"></p><ul><li><p>从上面的现象来看，很明显是 <code>webpack</code> 的 <code>code-splitting</code> 没生效导致的问题</p></li><li><p>项目中是在路由层面通过 <a href="https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import" target="_blank" rel="noreferrer"><code>import()</code></a> 和 <a href="https://webpack.js.org/api/module-methods/#webpackchunkname" target="_blank" rel="noreferrer"><code>webpackChunkName</code></a> 来实现的 <code>code-splitting</code></p></li><li><p><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97" target="_blank" rel="noreferrer">vue-router</a></p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;wangzhihao&quot; */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/package/wangzhihao/index.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="排查-webpack" tabindex="-1">排查 webpack <a class="header-anchor" href="#排查-webpack" aria-label="Permalink to &quot;排查 webpack&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">排查</p><p>在把有问题的项目中的 <code>webpack</code> 中 <code>code-splitting</code> 的相关使用方法和其他表现正常的项目对比下来，发现相关的 <code>webpack</code> 配置一模一样，所以关注点转移到 <code>@babel/preset-env</code> 的配置项 <code>modules</code> 上来。之前调整过 <code>babel</code> 配置文件的同事就想起来了。</p></div><ul><li>他调整的 <code>babel</code> 配置如图所示</li></ul><p><img src="'+c+'" alt="Alt text"></p><h3 id="排查-babel" tabindex="-1">排查 babel <a class="header-anchor" href="#排查-babel" aria-label="Permalink to &quot;排查 babel&quot;">​</a></h3><ul><li>我尝试把 <code>babel</code> 的 <code>modules</code> 属性还原为 <code>false</code>，然后 <code>build</code> 一下项目</li><li>构建出来的 <code>js</code> 文件完全按预期通过 <code>webpackChunkName</code> 实现了 <code>code-splitting</code> 问题就这样解决了...</li></ul><h2 id="问题复盘" tabindex="-1">问题复盘 <a class="header-anchor" href="#问题复盘" aria-label="Permalink to &quot;问题复盘&quot;">​</a></h2><h3 id="为什么-babel-配置会影响-code-splitting" tabindex="-1">为什么 <code>babel</code> 配置会影响 <code>code-splitting</code> ? <a class="header-anchor" href="#为什么-babel-配置会影响-code-splitting" aria-label="Permalink to &quot;为什么 `babel` 配置会影响 `code-splitting` ?&quot;">​</a></h3><ul><li>我一问巨佬 <code>chatgpt</code> 它的回答就给我明确的线索！太吊了</li></ul><p><img src="'+t+'" alt="Alt text"></p><h3 id="本质原因" tabindex="-1">本质原因 <a class="header-anchor" href="#本质原因" aria-label="Permalink to &quot;本质原因&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>同事把 <code>babel</code> 中 <code>@babel/preset-env</code> 的配置 <code>modules</code> 值从 <code>false</code> 改为 <code>commonjs</code></li><li><code>modules</code> 为 <code>commonjs</code> 时， <code>@babel/preset-env</code> 会将 <code>es module</code> 转换成 <code>commonjs</code></li><li>结果就是把项目中写的 <code>import()</code> 转换成了 <code>require()</code></li><li>然而 <code>webpack</code> 处理 <code>require()</code> 就是正常的模块打包加载，不会编译成动态加载的模块，进而导致 <code>code-splitting</code> 失效</li></ul></div><h2 id="babel-modules-不同编译效果" tabindex="-1">babel modules 不同编译效果 <a class="header-anchor" href="#babel-modules-不同编译效果" aria-label="Permalink to &quot;babel modules 不同编译效果&quot;">​</a></h2><h3 id="modules-为-false" tabindex="-1">modules 为 false <a class="header-anchor" href="#modules-为-false" aria-label="Permalink to &quot;modules 为 false&quot;">​</a></h3><p><img src="'+d+'" alt="Alt text"></p><h3 id="modules-为-commonjs" tabindex="-1">modules 为 commonjs <a class="header-anchor" href="#modules-为-commonjs" aria-label="Permalink to &quot;modules 为 commonjs&quot;">​</a></h3><p><img src="'+i+'" alt="Alt text"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://github.com/babel/babel/issues/10273#issuecomment-517838332" target="_blank" rel="noreferrer">babel issue</a></p><p><a href="https://www.babeljs.cn/docs/babel-preset-env#modules" target="_blank" rel="noreferrer">babel-preset-env modules</a></p>',32),p=[r];function b(u,h,m,g,k,f){return a(),o("div",null,p)}const x=e(n,[["render",b]]);export{q as __pageData,x as default};
