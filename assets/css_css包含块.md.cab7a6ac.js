import{_ as s,o as a,c as n,V as e}from"./chunks/framework.92369faf.js";const h=JSON.parse('{"title":"CSS 中的包含块","description":"","frontmatter":{},"headers":[],"relativePath":"css/css包含块.md","filePath":"css/css包含块.md","lastUpdated":1686913266000}'),o={name:"css/css包含块.md"},l=e(`<h1 id="css-中的包含块" tabindex="-1">CSS 中的包含块 <a class="header-anchor" href="#css-中的包含块" aria-label="Permalink to &quot;CSS 中的包含块&quot;">​</a></h1><h2 id="一、为什么要了解包含块" tabindex="-1">一、为什么要了解包含块？ <a class="header-anchor" href="#一、为什么要了解包含块" aria-label="Permalink to &quot;一、为什么要了解包含块？&quot;">​</a></h2><p>一个元素的尺寸和位置经常受其包含块(containing block)的影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值 （比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</p><h2 id="二、如何确定包含块" tabindex="-1">二、如何确定包含块？ <a class="header-anchor" href="#二、如何确定包含块" aria-label="Permalink to &quot;二、如何确定包含块？&quot;">​</a></h2><p><strong>确定一个元素的包含块的过程完全依赖于这个属性的 position 属性。</strong></p><ul><li><p>1、如果 position 属性为 <strong>static 、 relative 、 sticky</strong>，包含块可能由它的最近的祖先<strong>块元素</strong>（比如说 inline-block, block 或 list-item 元素）的内容区的边缘组成，也可能会建立格式化上下文(比如说 a table container, flex container, grid container, 或者是 the block container 自身)。</p></li><li><p>2、如果 position 属性为 absolute ，包含块就是由它的最近的 position 的值不是 static （也就是值为 fixed, absolute, relative 或 sticky）的祖先元素的内边距区的边缘组成。</p></li><li><p>3、如果 position 属性是 fixed，在连续媒体的情况下(continuous media)包含块是 viewport ,在分页媒体(paged media)下的情况下包含块是分页区域(page area)。</p></li><li><p>4、如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A transform or perspective value other than none</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A will</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">change value </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> transform or perspective</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A filter  value other than none or a will</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">change value </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(only works on Firefox)</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A contain value </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">paint</span><span style="color:#A6ACCD;"> (例如: contain: paint;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,7),t=[l];function p(r,i,c,d,A,C){return a(),n("div",null,t)}const u=s(o,[["render",p]]);export{h as __pageData,u as default};
