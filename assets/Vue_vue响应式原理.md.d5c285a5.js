import{_ as e,o as t,c as a,V as o}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"Vue.js 内部运行机制笔记","description":"","frontmatter":{"title":"Vue.js 内部运行机制笔记"},"headers":[],"relativePath":"Vue/vue响应式原理.md","filePath":"Vue/vue响应式原理.md","lastUpdated":1686842923000}'),r={name:"Vue/vue响应式原理.md"},n=o('<h2 id="全局概览图" tabindex="-1">全局概览图 <a class="header-anchor" href="#全局概览图" aria-label="Permalink to &quot;全局概览图&quot;">​</a></h2><p><img src="http://image.jinghao.xyz/blog/20200617/EGacTh2XUxIR.png" alt="mark"></p><h2 id="初始化及挂载" tabindex="-1">初始化及挂载 <a class="header-anchor" href="#初始化及挂载" aria-label="Permalink to &quot;初始化及挂载&quot;">​</a></h2><p><img src="http://image.jinghao.xyz/blog/20200617/dRXt0fr4Xrxi.png" alt="mark"></p><p>在用 <code>new Vue()</code> 之后， <code>Vue</code> 会调用 <code>_init</code> 函数进行初始化即图上 <code>init</code> 过程。在此过程中会初始化生命周期、事件、 <code>props</code>、 <code>methods</code>、 <code>data</code>、 <code>computed</code> 与 <code>watch</code> 等。其中最重要的是通过 <code>Object.defineProperty</code> 设置 <code>setter</code> 与 <code>getter</code> 函数，用来实现<strong>响应式</strong>以及<strong>依赖收集</strong>。</p><p>初始化之后调用 $mount 会挂载组件，挂载组件前需要进行<strong>编译</strong>步骤。</p><h2 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h2><p>编译分为三个阶段，分别为 <code>parse</code> 、<code>optimize</code> 、 <code>generate</code> ，经过这三个阶段后，最终会得到一个渲染函数 <code>render function()</code>。</p><p><img src="http://image.jinghao.xyz/blog/20200617/XHTX7xYKYF6D.png" alt="mark"></p><h3 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p>parse 会用正则等方式解析 template 模板中的指令、class、style等数据，最终形成 AST 。</p><h3 id="optimize" tabindex="-1">optimize <a class="header-anchor" href="#optimize" aria-label="Permalink to &quot;optimize&quot;">​</a></h3><p>optimize 的主要作用是<strong>标记 static 静态节点，这是 Vue 在编译过程中的一处优化</strong>，后面在 update 更新界面的时候，会有一个 patch 过程，在此过程中 diff 算法会<strong>直接跳过已经标记为静态节点的节点</strong>，从而减少了比较的过程，优化了 patch 的性能。</p><h3 id="generate" tabindex="-1">generate <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;generate&quot;">​</a></h3><p>是将 AST 装化成 render function() 字符串的过程。</p><p><strong>经过 parse 、 optimize 、 generate 这三个阶段后，组件就会存在渲染 VNode 所需的 render function() 了</strong>。</p><h2 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h2><p>Vue 官网深入响应式图 <img src="http://image.jinghao.xyz/blog/20200617/lNjXsR1ONyC4.png" alt="mark"></p><p>在 init 的时候通过 Object.defineProperty 进行了绑定 getter 跟 setter，它使得当被设置的对象被读取的时候会执行 getter 函数，而在当被赋值的时候会执行 setter 函数。</p><p>当 render function 被渲染的时候，读取所需对象的值（即每个组件中的 data() 函数中 return 的对象。此处一个问题，为什么组件内的 data 是函数不是对象），会触发 getter 函数进行 <strong>依赖收集</strong>，进行依赖收集的目的是将组件中的依赖的 data 通知观察者 Watcher 。</p><p>之后在修改组件依赖项的值的时候，会触发对应的 setter ， setter 通知之前已经完成依赖收集的 Watcher ，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用 update 来更新视图，当然这中间还有一个 patch 的过程以及使用队列来 <strong>异步更新（$nextTick）</strong> 的策略。</p><h2 id="virtual-dom" tabindex="-1">Virtual DOM <a class="header-anchor" href="#virtual-dom" aria-label="Permalink to &quot;Virtual DOM&quot;">​</a></h2><p>render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。</p><p>当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用 innerHTML 直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「浪费」。</p><p>那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「patch」了。我们会将新的 VNode 与旧的 VNode 一起传入 patch 进行比较，经过 diff 算法得出它们的「差异」。最后我们只需要将这些「差异」的对应 DOM 进行修改即可。</p>',25),d=[n];function i(c,p,s,h,l,u){return t(),a("div",null,d)}const _=e(r,[["render",i]]);export{m as __pageData,_ as default};
