import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const e="/assets/image.23935821.png",p="/assets/image-1.d28711af.png",o="/assets/image-2.703d50e1.png",c="/assets/image-3.f25cb67c.png",r="/assets/image-4.86164292.png",t="/assets/image-5.ef787930.png",i="/assets/image-6.af28209d.png",d="/assets/image-7.08121ac3.png",C="/assets/image-8.7feebaa5.png",y="/assets/image-9.269236f1.png",D="/assets/image-10.9e944ad1.png",u="/assets/image-11.5d9424d5.png",A="/assets/image-12.50ddd089.png",b="/assets/image-13.3110a240.png",m="/assets/image-14.c58bc1f4.png",E="/assets/image-15.ae0ecaa8.png",g="/assets/image-16.b77f77dc.png",P=JSON.parse('{"title":"docker base","description":"","frontmatter":{},"headers":[],"relativePath":"docker/base/base.md","filePath":"docker/base/base.md","lastUpdated":1695914105000}'),h={name:"docker/base/base.md"},F=l('<h1 id="docker-base" tabindex="-1">docker base <a class="header-anchor" href="#docker-base" aria-label="Permalink to &quot;docker base&quot;">​</a></h1><h2 id="什么是-docker" tabindex="-1">什么是 docker <a class="header-anchor" href="#什么是-docker" aria-label="Permalink to &quot;什么是 docker&quot;">​</a></h2><ul><li><code>Docker</code> 是一种容器技术，它可以在操作系统上创建多个相互隔离的容器。容器内可以独立安装软件、运行服务。</li></ul><p><img src="'+e+'" alt="Alt text"></p><ul><li>但是，这个容器和宿主机还是有关联的，比如可以把宿主机的端口映射到容器内的端口、宿主机某个目录挂载到容器内的目录。</li></ul><p><img src="'+p+'" alt="Alt text"></p><ul><li><p>比如映射了 <code>3444</code> 端口，那容器内 <code>3000</code> 端口的服务，就可以在宿主机的 <code>3444</code> 端口访问了。</p></li><li><p>比如挂载了 <code>/aaa</code> 到容器的 <code>/bbb/ccc</code>，那容器内读写 <code>/bbb/ccc</code> 目录的时候，改的就是宿主机的 <code>/aaa</code> 目录，反过来，改宿主机 <code>/aaa</code> 目录，容器内的 <code>/bbb/ccc</code> 也会改，这俩同一个。</p></li><li><p>这分别叫做端口映射、数据卷 <code>volume</code> 挂载。</p></li><li><p>这个容器是通过镜像起来的，通过 <code>docker run image-name</code></p></li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3444</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/aaa:/bbb/ccc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx-container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx-image</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>通过 <code>xxx-image</code> 镜像跑起来一个叫做 <code>xxx-container</code> 的容器。</p></li><li><p><code>-p</code> 指定端口映射，映射宿主机的 <code>3444</code> 到容器的 <code>3000</code> 端口。</p></li><li><p><code>-v</code> 指定数据卷挂载，挂载宿主机的 <code>/aaa</code> 到容器的 <code>/bbb/ccc</code> 目录。</p></li><li><p>这个镜像是通过 <code>Dockerfile</code> 经过 <code>build</code> 产生的。</p></li></ul><p>流程示意图：</p><p><img src="'+o+'" alt="Alt text"></p><div class="tip custom-block"><p class="custom-block-title">镜像和容器怎么使用？</p><p>一般在项目里维护 <code>Dockerfile</code> ，然后执行 <code>docker build</code> 构建出镜像、<code>push</code> 到镜像仓库，部署的时候 <code>pull</code> 下来用 <code>docker run</code> 跑起来。</p></div><h2 id="安装-docker" tabindex="-1">安装 docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 docker&quot;">​</a></h2><ul><li>上官网下载桌面端安装包，安装即可。官网地址：<a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></li></ul><p><img src="'+c+'" alt="Alt text"></p><ul><li>安装完成后，会在桌面上出现一个 <code>Docker</code> 图标，双击打开，会出现一个控制台。</li><li>在控制台里，可以看到镜像、容器、网络、卷等信息。</li></ul><p><img src="'+r+`" alt="Alt text"></p><h2 id="来个简单的例子" tabindex="-1">来个简单的例子 <a class="header-anchor" href="#来个简单的例子" aria-label="Permalink to &quot;来个简单的例子&quot;">​</a></h2><ul><li>用 nest 新建一个项目，然后在项目根目录下新建一个 <code>dockerfile</code> 文件。</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">.lock</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> [ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><p>FROM <code>node:18</code> 是继承 <code>node:18</code> 基础镜像。</p></li><li><p><code>WORKDIR /app</code> 是指定当前目录为 <code>/app</code></p></li><li><p><code>COPY</code> 复制宿主机的 <code>package.json</code> 和 <code>lock</code> 文件到容器的当前目录，也就是 <code>/app</code> 下</p></li><li><p><code>RUN</code> 是执行命令，这里执行了 <code>npm install</code>。</p></li><li><p>然后再复制其余的文件到容器内。</p></li><li><p><code>EXPOSE</code> 指定容器需要暴露的端口是 <code>3000</code></p></li><li><p><code>CMD</code> 指定容器跑起来时执行的命令是 <code>node ./dist/main.js</code></p></li></ul><h2 id="构建镜像命令" tabindex="-1">构建镜像命令 <a class="header-anchor" href="#构建镜像命令" aria-label="Permalink to &quot;构建镜像命令&quot;">​</a></h2><ul><li>然后在项目根目录下执行 <code>docker build</code> 构建镜像。</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:first</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><code>-t</code> 是指定名字和标签，这里镜像名为 <code>dockerfile-test</code> 标签为 <code>first</code></p></li><li><p>最后面的 <code>.</code> 指的是构建路径为当前根目录，默认会在当前目录下找 <code>dockerfile</code> 文件，如果不是当前目录，可以指定 <code>dockerfile</code> 文件的路径。</p></li><li><p>构建完成后，可以在 <code>docker desktop</code> 里看到刚刚构建的镜像。</p></li></ul><p><img src="`+t+'" alt="Alt text"></p><ul><li>现在这个镜像有点大，有 <code>1.5G</code>。</li></ul><h2 id="运行容器命令" tabindex="-1">运行容器命令 <a class="header-anchor" href="#运行容器命令" aria-label="Permalink to &quot;运行容器命令&quot;">​</a></h2><ul><li>先把刚刚构建的镜像跑起来看看。</li></ul><p><img src="'+i+'" alt="Alt text"></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2333</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jingjing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:first</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><code>-d</code> 是后台运行。</p></li><li><p><code>-p</code> 指定端口映射，映射宿主机的 <code>2333</code> 端口到容器的 <code>3000</code> 端口。</p></li><li><p><code>--name</code> 指定容器名</p></li><li><p>最后面的 <code>dockerfile-test:first</code> 是指定镜像名和标签。</p></li><li><p>运行完成后，可以在 <code>docker desktop</code> 里看到刚刚运行的容器。</p></li></ul><p><img src="'+d+'" alt="Alt text"></p><ul><li>然后在浏览器里访问 <code>localhost:2333</code> 就可以看到 <code>hello world</code> 了。</li></ul><p><img src="'+C+'" alt="Alt text"></p><ul><li><p>这就是 Dockerfile 构建成镜像，然后通过容器跑起来的流程。</p></li><li><p>现在这个镜像有点大，有 <code>1.5G</code>，怎么减小镜像体积呢？</p></li></ul><h2 id="技巧一-使用-alpine-镜像-而不是默认的-linux-镜像【减小体积】" tabindex="-1">技巧一：使用 alpine 镜像，而不是默认的 linux 镜像【减小体积】 <a class="header-anchor" href="#技巧一-使用-alpine-镜像-而不是默认的-linux-镜像【减小体积】" aria-label="Permalink to &quot;技巧一：使用 alpine 镜像，而不是默认的 linux 镜像【减小体积】&quot;">​</a></h2><ul><li><p><code>docker</code> 容器内跑的是 <code>linux</code> 系统，各种镜像的 <code>dockerfile</code> 都会继承 <code>linux</code> 镜像作为基础镜像。</p></li><li><p>比如我们刚刚创建的那个镜像，点开详情可以看到它的镜像继承关系：</p></li></ul><p><img src="'+y+'" alt="Alt text"></p><ul><li><p>可以看到最终还是继承了 <code>debian</code> 的 <code>Linux</code> 镜像，这是一个 <code>linux</code> 发行版。</p></li><li><p>但其实这个 <code>linux</code> 镜像可以换成更小的版本，也就是 alpine。</p></li><li><p>它裁剪了很多不必要的 <code>linux</code> 功能，使得镜像体积大幅减小了。</p></li><li><p>修改一下上述 <code>dockerfile</code> 内容, 使用 <code>alpine</code> 的镜像：</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">改成</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine3.14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><code>node:18-alpine3.14</code> 是使用 <code>18</code> 版本的 <code>node</code> 镜像，它底层使用 <code>alpine 3.14</code> 的基础镜像。</p></li><li><p>重新 <code>build</code> 一下镜像【换个名字】</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:second</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>可以打开 <code>docker desktop</code> 看到 <code>second</code> 这个镜像会比 <code>first</code> 这个镜像体积减少大约 <code>900M</code></li></ul><p><img src="'+D+'" alt="Alt text"></p><ul><li>可以点开 <code>second</code> 这个镜像的继承关系，可以看到它最终继承的是 <code>alpine</code> 的 <code>linux</code> 镜像。</li></ul><p><img src="'+u+'" alt="Alt text"></p><ul><li>虽然 <code>alpine</code> 镜像体积小，但是它的 <code>linux</code> 功能比较少，所以在使用的时候，可能会遇到一些问题。</li><li>但是一般来说，如果不是特别复杂的项目，使用 <code>alpine</code> 镜像是没有问题的。</li><li>这里可以重新运行一下 <code>second</code> 这个镜像，看看效果。</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2334</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jingjing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:second</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+A+`" alt="Alt text"></p><ul><li>然后在浏览器里访问 <code>localhost:2334</code> 就可以看到 <code>hello world</code> 了。</li></ul><h2 id="技巧二-docker-的缓存机制【加快构建速度】" tabindex="-1">技巧二：docker 的缓存机制【加快构建速度】 <a class="header-anchor" href="#技巧二-docker-的缓存机制【加快构建速度】" aria-label="Permalink to &quot;技巧二：docker 的缓存机制【加快构建速度】&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine3.14</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">.lock</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> [ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><p>观察这个 <code>dockerfile</code> ，发现里面有两次 <code>copy</code> 文件的操作。</p></li><li><p>为什么先复制 <code>package.json</code> 进去，安装依赖之后再复制其他文件，直接全部复制进去不就行了？</p></li><li><p>不是的，这两种写法的效果不同。 <code>docker</code> 是分层存储的，<code>dockerfile</code> 里的每一行指令是一层，会做缓存。</p></li><li><p>每次 <code>docker build</code> 的时候，只会从变化的层开始重新构建，没变的层会直接复用。</p></li><li><p>也就说现在这种写法，如果 <code>package.json</code> 没变，那么就不会执行 <code>npm install</code>，直接复用之前的。</p></li><li><p>那如果一开始就把所有文件复制进去呢？</p></li><li><p>那不管 <code>package.json</code> 变没变，任何一个文件变了，都会重新 <code>npm install</code>，这样没法充分利用缓存，性能不好。</p></li><li><p>我们来实际试试看就知道了，现在重新跑 <code>docker build</code>，不管跑多少次，速度都很快，因为文件没变，直接用了镜像缓存。</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:second</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+b+'" alt="Alt text"></p><ul><li>现在我们改下 <code>README.md</code> ，然后重新跑一下 <code>docker build</code>，看看效果。</li></ul><p><img src="'+m+'" alt="Alt text"></p><ul><li><p>现在花了 <code>9.5s</code>，其实是没有重新 <code>npm install</code> 的。</p></li><li><p>然后改下 <code>package.json</code>，然后重新跑一下 <code>docker build</code>，看看效果。</p></li></ul><p><img src="'+E+`" alt="Alt text"></p><ul><li>现在花了 <code>80s</code> ，时间明显多了很多，过程中你可以看到在 <code>npm install</code> 那层停留了很长时间。</li></ul><h2 id="技巧三-使用多阶段构建【减小体积】" tabindex="-1">技巧三：使用多阶段构建【减小体积】 <a class="header-anchor" href="#技巧三-使用多阶段构建【减小体积】" aria-label="Permalink to &quot;技巧三：使用多阶段构建【减小体积】&quot;">​</a></h2><ul><li><p>还有一个问题就是源码和很多构建的依赖是不需要的，但是现在都保存在了镜像里。</p></li><li><p>实际上我们只需要构建出来的 <code>./dist</code> 目录下的文件还有运行时的依赖。</p></li><li><p>这时可以采用多阶段构建：</p></li></ul><div class="info custom-block"><p class="custom-block-title">多阶段构建</p><p>多阶段构建是一种用于减小 <code>Docker</code> 镜像大小的技术。 它通过将构建过程分成多个阶段来实现，每个阶段都可以使用不同的基础镜像和构建步骤， 最终只将必要的文件和依赖包复制到最终镜像中，从而减小镜像的体积。</p></div><ul><li>我们来看看如何使用多阶段构建，先把 <code>dockerfile</code> 改成下面这样：</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine3.14</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build-stage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># production stage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine3.14</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">production-stage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from=build-stage</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/dist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from=build-stage</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/package.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--production</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> [ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/app/main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><ul><li><p><code>FROM</code> 后面添加一个 <code>as</code> 来指定当前构建阶段的名字。</p></li><li><p>通过 <code>COPY --from=xxx</code> 可以从上个阶段复制文件过来。</p></li><li><p>然后 <code>npm install</code> 的时候添加 <code>--production</code>，这样只会安装 <code>dependencies</code> 的依赖。</p></li><li><p><code>docker build</code> 之后，只会留下最后一个阶段的镜像。</p></li><li><p>也就是说，最终构建出来的镜像里是没有源码的，有的只是 <code>dist</code> 的文件和运行时依赖。这样镜像就会小很多。</p></li><li><p>现在重新跑一下 <code>docker build</code>，看看效果。</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile-test:third</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jing.Dockerfile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>标签为 <code>third</code> ， <code>-f</code> 是指定 <code>Dockerfile</code> 的名字，这里采用了 <code>jing.Dockerfile</code>。</li></ul><p><img src="`+g+'" alt="Alt text"></p><ul><li>从图上能看到，镜像体积比没有用多阶段构建的时候小了 <code>250 M</code>。</li></ul>',71),k=[F];function B(f,_,x,v,R,q){return n(),a("div",null,k)}const j=s(h,[["render",B]]);export{P as __pageData,j as default};
