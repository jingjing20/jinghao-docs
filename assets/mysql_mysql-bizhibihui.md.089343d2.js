import{_ as p,H as t,o as c,c as r,C as s,a,J as n,E as e,V as o}from"./chunks/framework.92369faf.js";const I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mysql/mysql-bizhibihui.md","filePath":"mysql/mysql-bizhibihui.md","lastUpdated":1687705770000}'),i={name:"mysql/mysql-bizhibihui.md"},d=o(`<h2 id="第-4-章—检索数据" tabindex="-1">第 4 章—检索数据 <a class="header-anchor" href="#第-4-章—检索数据" aria-label="Permalink to &quot;第 4 章—检索数据&quot;">​</a></h2><h3 id="检索不同的行【去重】" tabindex="-1">检索不同的行【去重】 <a class="header-anchor" href="#检索不同的行【去重】" aria-label="Permalink to &quot;检索不同的行【去重】&quot;">​</a></h3><ul><li>解决办法是使用 DISTINCT 关键字，顾名思义，此关键字指示 MySQL 只返回不同的值。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT DISTINCT</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="限制结果" tabindex="-1">限制结果 <a class="header-anchor" href="#限制结果" aria-label="Permalink to &quot;限制结果&quot;">​</a></h3><ul><li>LIMIT 5, 5 指示 MySQL 返回从行 5 开始的 5 行。第一个数为开始位置，第二个数为要检索的行数。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="第-5-章—排序检索数据" tabindex="-1">第 5 章—排序检索数据 <a class="header-anchor" href="#第-5-章—排序检索数据" aria-label="Permalink to &quot;第 5 章—排序检索数据&quot;">​</a></h2><h3 id="默认排序【order-by-asc】" tabindex="-1">默认排序【ORDER BY ASC】 <a class="header-anchor" href="#默认排序【order-by-asc】" aria-label="Permalink to &quot;默认排序【ORDER BY ASC】&quot;">​</a></h3><ul><li>为了明确地排序用 SELECT 语句检索出的数据，可使用 <code>ORDER BY</code> 子句。 <code>ORDER BY</code> 子句取一个或多个列的名字，据此对输出进行排序。请看下面的例子：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">📢</p><p>通常，<code>ORDER BY</code> 子句中使用的列将 是为显示所选择的列。但是，实际上并不一定要这样，用非检索的列排序数据是完全合法的。</p></div><h3 id="按多个列排序" tabindex="-1">按多个列排序 <a class="header-anchor" href="#按多个列排序" aria-label="Permalink to &quot;按多个列排序&quot;">​</a></h3><ul><li>首先按价格，然后再按名称排序。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price,prod_name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="指定排序方向" tabindex="-1">指定排序方向 <a class="header-anchor" href="#指定排序方向" aria-label="Permalink to &quot;指定排序方向&quot;">​</a></h3><ul><li>数据排序不限于升序排序（从 A 到 Z）。这只是 <strong>默认</strong> 的排序顺序，还可 以使用 <code>ORDER BY</code> 子句以降序（从 Z 到 A）顺序排序。为了进行降序排序， 必须指定 <strong><code>DESC</code></strong> 关键字。下面的例子按价格以降序排序产品（最贵的排在最前面）：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>但是，如果打算用多个列排序怎么办？下面的例子以产品价格降序排序产品 （最贵的在最前面），然后再对产品名排序：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;">, prod_name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>DESC 关键字只应用到直接位于其前面的列名。在上例中，只对 prod_price 列指定 DESC，对 prod_name 列不指定。因此， prod_price 列以降序排序，而 prod_name 列（在每个价格内）仍然按标准 的升序排序。</p></li><li><p>如果想在多个列上进行降序排序，必须对每个列指定 DESC 关键字。</p></li><li><p>使用 ORDER BY 和 LIMIT 的组合，能够找出一个列中最高或最低的值。 下面的例子演示如何找出最昂贵物品的值：</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">📢</p><p>在给出 ORDER BY 子句时，应该保证它 位于 FROM 子句之后。如果使用 LIMIT，它必须位于 ORDER BY 之后。使用子句的次序不对将产生错误消息。</p></div><h3 id="区分大小写和排序顺序" tabindex="-1">区分大小写和排序顺序 <a class="header-anchor" href="#区分大小写和排序顺序" aria-label="Permalink to &quot;区分大小写和排序顺序&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">🌈</p><p>在对文本性的数据进行排序时，A 与 a 相同吗？a 位于 B 之前还是位于 Z 之后？这些问题不是理论问题，其答案取决于数据库如何设置。 在字典（dictionary）排序顺序中，A 被视为与 a 相同，这是 MySQL （和大多数数据库管理系统）的默认行为。但是，许多数据库 管理员能够在需要时改变这种行为（如果你的数据库包含大量 外语字符，可能必须这样做）。 这里，关键的问题是，如果确实需要改变这种排序顺序，用简 单的 ORDER BY 子句做不到。</p></div><h2 id="第-6-章—过滤数据" tabindex="-1">第 6 章—过滤数据 <a class="header-anchor" href="#第-6-章—过滤数据" aria-label="Permalink to &quot;第 6 章—过滤数据&quot;">​</a></h2><h3 id="where-子句操作符" tabindex="-1">WHERE 子句操作符 <a class="header-anchor" href="#where-子句操作符" aria-label="Permalink to &quot;WHERE 子句操作符&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">操作符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td>等于</td></tr><tr><td style="text-align:left;">&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td style="text-align:left;">&gt;</td><td>大于</td></tr><tr><td style="text-align:left;">&lt;</td><td>小于</td></tr><tr><td style="text-align:left;">&gt;=</td><td>大于等于</td></tr><tr><td style="text-align:left;">&lt;=</td><td>小于等于</td></tr><tr><td style="text-align:left;">BETWEEN</td><td>在某个范围内</td></tr><tr><td style="text-align:left;">LIKE</td><td>模糊匹配</td></tr><tr><td style="text-align:left;">IN</td><td>在一组值中</td></tr><tr><td style="text-align:left;">IS NULL</td><td>为空</td></tr><tr><td style="text-align:left;">IS NOT NULL</td><td>不为空</td></tr><tr><td style="text-align:left;">AND</td><td>逻辑与</td></tr><tr><td style="text-align:left;">OR</td><td>逻辑或</td></tr><tr><td style="text-align:left;">NOT</td><td>逻辑非</td></tr></tbody></table><h3 id="不匹配检查" tabindex="-1">不匹配检查 <a class="header-anchor" href="#不匹配检查" aria-label="Permalink to &quot;不匹配检查&quot;">​</a></h3><ul><li>以下例子列出不是由供应商 1003 制造的所有产品：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">&lt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="范围值检查" tabindex="-1">范围值检查 <a class="header-anchor" href="#范围值检查" aria-label="Permalink to &quot;范围值检查&quot;">​</a></h3><ul><li>下面的例子说明如何使用 BETWEEN 操作符，它检索价格在 5 美元和 10 美元之间的所有产品：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">BETWEEN</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="空值检查" tabindex="-1">空值检查 <a class="header-anchor" href="#空值检查" aria-label="Permalink to &quot;空值检查&quot;">​</a></h3><ul><li>在创建表时，表设计人员可以指定其中的列是否可以不包含值。在 一个列不包含值时，称其为包含空值 NULL。</li><li><strong><em>NULL 无值（no value），它与字段包含 0、空字符串或仅仅包含空格不同。</em></strong></li><li>SELECT 语句有一个特殊的 WHERE 子句，可用来检查具有 NULL 值的列。 这个 WHERE 子句就是 IS NULL 子句。</li></ul><div class="tip custom-block"><p class="custom-block-title">🌈</p><p>NULL 与不匹配 在通过过滤选择出不具有特定值的行时，你可能希望返回具有 NULL 值的行。但是不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。 因此在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有 NULL 的行。</p></div><h2 id="第-7-章—数据过滤" tabindex="-1">第 7 章—数据过滤 <a class="header-anchor" href="#第-7-章—数据过滤" aria-label="Permalink to &quot;第 7 章—数据过滤&quot;">​</a></h2><h3 id="组合-where-子句" tabindex="-1">组合 WHERE 子句 <a class="header-anchor" href="#组合-where-子句" aria-label="Permalink to &quot;组合 WHERE 子句&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">🌈</p><p>第 6 章中介绍的所有 <code>WHERE</code> 子句在过滤数据时使用的都是单一的条 件。为了进行更强的过滤控制，MySQL 允许给出多个 <code>WHERE</code> 子句。这些子句可以两种方式使用：以 <code>AND</code> 子句的方式或 <code>OR</code> 子句的方式使用。</p></div><h3 id="and-操作符" tabindex="-1">AND 操作符 <a class="header-anchor" href="#and-操作符" aria-label="Permalink to &quot;AND 操作符&quot;">​</a></h3><ul><li>为了通过不止一个列进行过滤，可使用 <code>AND</code> 操作符给 <code>WHERE</code> 子句附加 条件。下面的代码给出了一个例子：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>此 SQL 语句检索由供应商 1003 制造 <strong><em>且</em></strong> 价格小于等于 10 美元的所有产品信息。</li><li>上述例子中使用了只包含一个关键字 AND 的语句，把两个过滤条件组 合在一起。还可以添加多个过滤条件，每添加一条就要使用一个 AND。</li></ul><h3 id="or-操作符" tabindex="-1">OR 操作符 <a class="header-anchor" href="#or-操作符" aria-label="Permalink to &quot;OR 操作符&quot;">​</a></h3><ul><li><code>OR</code> 操作符与 <code>AND</code> 操作符不同，它指示 <code>MySQL</code> 检索匹配任一条件的行。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">OR</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>此 SQL 语句检索由供应商 1003 制造 <strong><em>或者</em></strong> 价格小于等于 10 美元的所有产品信息。</li></ul><h3 id="计算次序" tabindex="-1">计算次序 <a class="header-anchor" href="#计算次序" aria-label="Permalink to &quot;计算次序&quot;">​</a></h3><ul><li>WHERE 可包含任意数目的 AND 和 OR 操作符。允许两者结合以进行复杂和高级的过滤。</li><li>假如需要列出价格为 10 美元（含）以上且由 1002 或 1003 制 造的所有产品。下面的 <code>SELECT</code> 语句使用 AND 和 OR 操作符的组合建立了一个 WHERE 子句：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1002</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">OR</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>返回的行中会有两行价格小于 10 美元，显然， 返回的行未按预期的进行过滤。为什么会这样呢？原因在于计 算的次序。SQL（像多数语言一样）在处理 <code>OR</code> 操作符前，优先处理 <code>AND</code> 操作符。当 <code>SQL</code> 看到上述 <code>WHERE</code> 子句时，它理解为由供应商 1003 制造的任何价格为 10 美元（含）以上的产品，或者由供应商 1002 制造的任何产品，而不管其价格如何。换句话说，由于 <code>AND</code> 在计算次序中优先级更高，操作符被错误地组合了。</li><li>此问题的解决方法是使用圆括号明确地分组相应的操作符。请看下 面的 <code>SELECT</code> 语句：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> (vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1002</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">OR</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">🌈 在 <code>WHERE</code> 子句中使用圆括号</p><p>任何时候使用具有 AND 和 OR 操作 符的 <code>WHERE</code> 子句，都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如 此。使用圆括号没有什么坏处，它能消除歧义。</p></div><h3 id="in-操作符" tabindex="-1">IN 操作符 <a class="header-anchor" href="#in-操作符" aria-label="Permalink to &quot;IN 操作符&quot;">​</a></h3><ul><li>圆括号在 <code>WHERE</code> 子句中还有另外一种用法。IN 操作符用来指定条件范 围，范围中的每个条件都可以进行匹配。IN 取合法值的由逗号分隔的清 单，全都括在圆括号中。下面的例子说明了这个操作符：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1002</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>此 SELECT 语句检索供应商 1002 和 1003 制造的所有产品。IN 操作符能完成与 OR 相同的功能。</li></ul><div class="tip custom-block"><p class="custom-block-title">🌈 为什么要使用 IN 操作符？其优点具体如下：</p><ul><li>在使用长的合法选项清单时，IN 操作符的语法更清楚且更直观。</li><li>在使用 IN 时，计算的次序更容易管理（因为使用的操作符更少）。</li><li>IN 操作符一般比 OR 操作符清单执行更快。</li><li>IN 的最大优点是可以包含其他 SELECT 语句，使得能够更动态地建立 <code>WHERE</code> 子句。</li></ul></div><h3 id="not-操作符" tabindex="-1">NOT 操作符 <a class="header-anchor" href="#not-操作符" aria-label="Permalink to &quot;NOT 操作符&quot;">​</a></h3><ul><li><p><code>WHERE</code> 子句中的 <code>NOT</code> 操作符有且只有一个功能，那就是否定它之后所跟的任何条件。</p></li><li><p>下面的例子说明 <code>NOT</code> 的使用。为了列出除 1002 和 1003 之外的所有供应 商制造的产品</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1002</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="第-8-章—用通配符进行过滤" tabindex="-1">第 8 章—用通配符进行过滤 <a class="header-anchor" href="#第-8-章—用通配符进行过滤" aria-label="Permalink to &quot;第 8 章—用通配符进行过滤&quot;">​</a></h2><ul><li>为在搜索子句中使用通配符，必须使用 <code>LIKE</code> 操作符。<code>LIKE</code> 指示 <code>MySQL</code>， 后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。</li></ul><h3 id="百分号-通配符" tabindex="-1">百分号（%）通配符 <a class="header-anchor" href="#百分号-通配符" aria-label="Permalink to &quot;百分号（%）通配符&quot;">​</a></h3>`,65),C=s("code",null,"%",-1),y=s("code",null,"%",-1),A=s("strong",null,[s("em",null,"任何字符")],-1),u=s("strong",null,[s("em",null,"任意次数")],-1),D=s("li",null,[s("p",null,[a("为了找出所有以词 "),s("code",null,"jet"),a(" 起头的产品，可使用以下 "),s("code",null,"SELECT"),a(" 语句：")])],-1),h=o('<div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">LIKE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jet%</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">区分大小写</p><p>根据 MySQL 的配置方式，搜索可以是区分大小写的。如果区分大小写，&#39;jet%&#39;与 JetPack 1000 将不匹配。</p></div><ul><li>通配符可在搜索模式中任意位置使用，并且可以使用多个通配符。下面的例子使用两个通配符，它们位于模式的两端：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">LIKE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%anvil%</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',4),F=s("strong",null,[s("em",null,"0 个、1 个或多个字符")],-1),b=o('<div class="warning custom-block"><p class="custom-block-title">！注意尾空格</p><p>尾空格可能会干扰通配符匹配。例如，在保存词 anvil 时，如果它后面有一个或多个空格， 则子句 WHERE prod_name LIKE &#39;%anvil&#39; 将不会匹配它们，因为在最后的 l 后有多余的字符。 解决这个问题的一个简单的办法是在搜索模式最后附加一个%。 一个更好的办法是使用函数（第 11 章将会介绍）去掉首尾空格。</p></div><div class="warning custom-block"><p class="custom-block-title">！注意 NULL</p><p>虽然似乎%通配符可以匹配任何东西，但有一个例外，即 NULL。即使是 WHERE prod_name LIKE &#39;%&#39;也不能匹配用值 NULL 作为产品名的行。</p></div><h3 id="下划线-通配符" tabindex="-1">下划线（_）通配符 <a class="header-anchor" href="#下划线-通配符" aria-label="Permalink to &quot;下划线（\\_）通配符&quot;">​</a></h3>',3),m=s("strong",null,[s("em",null,"单个字符")],-1),E=s("li",null,"与 % 能匹配 0 个字符不一样，_总是匹配一个字符，不能多也不能少。",-1),v=o('<h3 id="使用通配符的技巧" tabindex="-1">使用通配符的技巧 <a class="header-anchor" href="#使用通配符的技巧" aria-label="Permalink to &quot;使用通配符的技巧&quot;">​</a></h3><p>MySQL 的通配符很有用。但这种功能是有代价的： 通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。 这里给出一些使用通配符要记住的技巧。</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li></ul><h2 id="第-9-章—用正则表达式进行搜索" tabindex="-1">第 9 章—用正则表达式进行搜索 <a class="header-anchor" href="#第-9-章—用正则表达式进行搜索" aria-label="Permalink to &quot;第 9 章—用正则表达式进行搜索&quot;">​</a></h2><ul><li><code>MySQL</code> 用 <code>WHERE</code> 子句对正则表达式提供了初步的支持，允许你指定正则表达式，过滤 <code>SELECT</code> 检索出的数据。</li></ul><h3 id="基本字符匹配" tabindex="-1">基本字符匹配 <a class="header-anchor" href="#基本字符匹配" aria-label="Permalink to &quot;基本字符匹配&quot;">​</a></h3><ul><li>我们从一个非常简单的例子开始。下面的语句检索列 <code>prod_name</code> 包含文本 <code>1000</code> 的所有行：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>除关键字 LIKE 被 REGEXP 替代外，这条语句看上去非常像使用 LIKE 的语句（第 8 章）。它告诉 MySQL：REGEXP 后所跟的东西作为正则表达式处理。</p></li><li><p>为什么要费力地使用正则表达式？在刚才的例子中，正则表达式确实没有带来太多好处（可能还会降低性能），不过，请考虑下面的例子：</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.000</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>这里使用了正则表达式 .000 。<strong>.</strong> 是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符，因此，1000 和 2000 都匹配且返回。</li></ul><div class="warning custom-block"><p class="custom-block-title">！LIKE 与 REGEXP</p><ul><li>在 LIKE 和 REGEXP 之间有一个重要的差别。请看以下两条语句：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">LIKE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>如果执行上述两条语句，会发现第一条语句不返回数据，而第二条语句返回一行。为什么？</li><li>LIKE 必须完全匹配整个列值（除非使用通配符）。</li><li>而 REGEXP 在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP 将会找到它，相应的行将被返回（部分匹配）</li><li>那么，REGEXP 能不能用来匹配整个列值（从而起与 LIKE 相同的作用）？答案是肯定的，使用 ^ 和 $ 定位符（anchor）即可</li></ul></div>',12),g={class:"warning custom-block"},_=s("p",{class:"custom-block-title"},"！匹配不区分大小写",-1),R=s("li",null,"MySQL 中的正则表达式匹配（自版本 3.23.4 后）不区分大小写（即，大写和小写都匹配）。",-1),q=s("strong",null,[s("em",null,"BINARY")],-1),k=o(`<h3 id="进行-or-匹配" tabindex="-1">进行 OR 匹配 <a class="header-anchor" href="#进行-or-匹配" aria-label="Permalink to &quot;进行 OR 匹配&quot;">​</a></h3><ul><li>为搜索两个串之一（或者为这个串，或者为另一个串）使用 | 如下所示：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1000|2000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>语句中使用了正则表达式 1000|2000。| 为正则表达式的 OR 操作符。它表示匹配其中之一，因此 1000 和 2000 都匹配并返回。</p></li><li><p>使用|从功能上类似于在 SELECT 语句中使用 OR 语句，多个 OR 条件可并入单个正则表达式。</p></li></ul><h3 id="匹配几个字符之一" tabindex="-1">匹配几个字符之一 <a class="header-anchor" href="#匹配几个字符之一" aria-label="Permalink to &quot;匹配几个字符之一&quot;">​</a></h3><ul><li>匹配几个字符之一可通过指定一组用[和]括起来的字符来完成:</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[123] ton</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>这里，使用了正则表达式[123] Ton。[123]定义一组字符，它的意思是匹配 1 或 2 或 3，因此，1 ton 和 2 ton 都匹配且返回（数据库里没有 3 ton）。</li></ul><div class="tip custom-block"><p class="custom-block-title">^</p><ul><li>字符集合也可以被否定，即它们将匹配除指定字符外的任何东西。</li><li>为否定一个字符集，在集合的开始处放置一个 ^ 即可。</li><li>[123]匹配字符 1、2 或 3，但[^123]却匹配除这些字符外的任何东西。</li></ul></div><h3 id="匹配范围" tabindex="-1">匹配范围 <a class="header-anchor" href="#匹配范围" aria-label="Permalink to &quot;匹配范围&quot;">​</a></h3><ul><li>集合可用来定义要匹配的一个或多个字符。例如，下面的集合将匹配数字 0 到 9：<code>[0123456789]</code></li><li>为简化这种类型的集合，可使用-来定义一个范围。下面的式子功能上等同于上述数字列表：<code>[0-9]</code></li><li>范围不限于完整的集合，<code>[1-3]</code>和<code>[6-9]</code>也是合法的范围。此外，范围不一定只是数值的，<code>[a-z]</code>匹配任意字母字符。</li></ul><h3 id="匹配特殊字符" tabindex="-1">匹配特殊字符 <a class="header-anchor" href="#匹配特殊字符" aria-label="Permalink to &quot;匹配特殊字符&quot;">​</a></h3><ul><li>为了匹配特殊字符，必须用<code>\\\\</code>为前导。<code>\\\\-</code>表示查找-，<code>\\\\.</code>表示查找<code>.</code>。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\\\.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>这种处理就是所谓的转义（escaping），正则表达式内具有特殊意义的所有字符都必须以这种方式转义。</li><li>这包括<code>.、|、[]</code>以及迄今为止使用过的其他特殊字符。</li><li>为了匹配反斜杠 <code>\\</code> 字符本身，需要使用 <code>\\\\</code>。</li></ul><div class="tip custom-block"><p class="custom-block-title"><code>\\</code>或<code>\\\\</code>?</p><ul><li>多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。</li><li>但 <code>MySQL</code> 要求两个反斜杠 <code>MySQL</code> 自己解释一个，正则表达式库解释另一个。</li></ul></div><h3 id="匹配-字符类" tabindex="-1">匹配 <code>字符类</code> <a class="header-anchor" href="#匹配-字符类" aria-label="Permalink to &quot;匹配 \`字符类\`&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>存在找出你自己经常使用的数字、所有字母字符或所有数字字母字符等的匹配。</li><li>为更方便工作，可以使用预定义的字符集，称为字符类（character class）。</li></ul></div><table><thead><tr><th>POSIX 字符类</th><th>含义</th><th>等效表示</th></tr></thead><tbody><tr><td><code>[:alnum:]</code></td><td>字母和数字字符</td><td><code>[A-Za-z0-9]</code></td></tr><tr><td><code>[:alpha:]</code></td><td>字母字符</td><td><code>[A-Za-z]</code></td></tr><tr><td><code>[:digit:]</code></td><td>数字字符</td><td><code>[0-9]</code></td></tr><tr><td><code>[:xdigit:]</code></td><td>十六进制数字字符</td><td><code>[A-Fa-f0-9]</code></td></tr><tr><td><code>[:lower:]</code></td><td>小写字母字符</td><td><code>[a-z]</code></td></tr><tr><td><code>[:upper:]</code></td><td>大写字母字符</td><td><code>[A-Z]</code></td></tr><tr><td><code>[:space:]</code></td><td>空白字符</td><td>包括空格、制表符等</td></tr><tr><td><code>[:blank:]</code></td><td>空白字符中的空格和制表符</td><td></td></tr></tbody></table><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[:digit:]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="重复元字符-量词" tabindex="-1">重复元字符(量词) <a class="header-anchor" href="#重复元字符-量词" aria-label="Permalink to &quot;重复元字符(量词)&quot;">​</a></h3><table><thead><tr><th>重复元字符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配前一个元素零次或多次</td></tr><tr><td><code>+</code></td><td>匹配前一个元素一次或多次 （等于<code>{1,}</code>）</td></tr><tr><td><code>?</code></td><td>匹配前一个元素零次或一次 （等于<code>{0,1}</code>）</td></tr><tr><td><code>{n}</code></td><td>匹配前一个元素恰好 n 次</td></tr><tr><td><code>{n,}</code></td><td>匹配前一个元素至少 n 次</td></tr><tr><td><code>{n,m}</code></td><td>匹配前一个元素至少 n 次且不超过 m 次 （m 不超过 255）</td></tr></tbody></table><ul><li>下面举几个例子。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\\\([0-9] sticks?\\\\)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">TNT1	</span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">	TNT (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> stick)	</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;">	TNT, red, single stick</span></span>
<span class="line"><span style="color:#A6ACCD;">TNT2	</span><span style="color:#F78C6C;">1003</span><span style="color:#A6ACCD;">	TNT (</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> sticks)	</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;">	TNT, red, pack of </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> sticks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="info custom-block"><p class="custom-block-title">解析</p><ul><li>正则表达式<code>\\\\([0-9] sticks?\\\\)</code>需要解说一下。<code>\\\\(</code>匹配<code>)</code></li><li><code>[0-9]</code>匹配任意数字（这个例子中为 1 和 5），<code>sticks?</code>匹配<code>stick</code>和<code>sticks</code></li><li><code>s</code> 后的 <code>?</code> 使 <code>s</code> 可选，因为 <code>?</code> 匹配它前面的任何字符的 <code>0</code> 次或 <code>1</code> 次出现</li><li><code>\\\\)</code>匹配<code>)</code>。没有<code>?</code>，匹配 <code>stick</code> 和 <code>sticks</code> 会非常困难。</li></ul></div><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[:digit:]{4}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">JP1000	</span><span style="color:#F78C6C;">1005</span><span style="color:#A6ACCD;">	JetPack </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">35</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;">	JetPack </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">, intended for single </span><span style="color:#F78C6C;">use</span></span>
<span class="line"><span style="color:#A6ACCD;">JP2000	</span><span style="color:#F78C6C;">1005</span><span style="color:#A6ACCD;">	JetPack </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">55</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;">	JetPack </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">, multi</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">use</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="info custom-block"><p class="custom-block-title">解析</p><ul><li><code>[:digit:]</code> 匹配任意数字，因而它为数字的一个集合。</li><li><code>{4}</code> 确切地要求它前面的字符（任意数字）出现 <code>4</code> 次，</li><li>所以 <code>[[:digit:]]{4}</code> 匹配连在一起的任意 <code>4</code> 位数字。</li></ul></div><h3 id="定位符" tabindex="-1">定位符 <a class="header-anchor" href="#定位符" aria-label="Permalink to &quot;定位符&quot;">​</a></h3><ul><li>目前为止的所有例子都是匹配一个串中任意位置的文本。为了匹配特定位置的文本，需要使用定位符。</li></ul><table><thead><tr><th>定位元字符</th><th>含义</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配输入字符串的开始位置</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置</td></tr><tr><td><code>\\b</code></td><td>匹配单词的边界</td></tr><tr><td><code>\\B</code></td><td>匹配非单词的边界</td></tr></tbody></table><ul><li>如果你想找出以一个数（包括以小数点开始的数）开始的所有产品，怎么办？</li><li>简单搜索<code>[0-9\\\\.]</code>或<code>[[:digit:]\\\\.]</code>不行，因为它将在文本内任意位置查找匹配。</li><li>解决办法是使用 <code>^</code> 定位符，如下所示：</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> products </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name REGEXP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^[0-9\\\\.]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ANV01	</span><span style="color:#F78C6C;">1001</span><span style="color:#A6ACCD;">	.</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> ton anvil	</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">99</span><span style="color:#A6ACCD;">	.</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> ton anvil, black, complete </span><span style="color:#F78C6C;">with</span><span style="color:#A6ACCD;"> handy hook</span></span>
<span class="line"><span style="color:#A6ACCD;">ANV02	</span><span style="color:#F78C6C;">1001</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> ton anvil	</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">99</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> ton anvil, black, complete </span><span style="color:#F78C6C;">with</span><span style="color:#A6ACCD;"> handy hook </span><span style="color:#F78C6C;">and</span><span style="color:#A6ACCD;"> carrying </span><span style="color:#F78C6C;">case</span></span>
<span class="line"><span style="color:#A6ACCD;">ANV03	</span><span style="color:#F78C6C;">1001</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> ton anvil	</span><span style="color:#F78C6C;">14</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">99</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> ton anvil, black, complete </span><span style="color:#F78C6C;">with</span><span style="color:#A6ACCD;"> handy hook </span><span style="color:#F78C6C;">and</span><span style="color:#A6ACCD;"> carrying </span><span style="color:#F78C6C;">case</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>^</code> 匹配串的开始。因此， <code>^[0-9\\\\.]</code> 只在\`\`.\` 或任意数字为串中第一个字符时才匹配它们。</li><li>没有 <code>^</code> 则还会多检索出 4 个别的行（那些中间有数字的行）。</li></ul><h2 id="第-10-章—创建计算字段" tabindex="-1">第 10 章—创建计算字段 <a class="header-anchor" href="#第-10-章—创建计算字段" aria-label="Permalink to &quot;第 10 章—创建计算字段&quot;">​</a></h2><h3 id="计算字段" tabindex="-1">计算字段 <a class="header-anchor" href="#计算字段" aria-label="Permalink to &quot;计算字段&quot;">​</a></h3><ul><li>有时候存储在表中的数据都不是客户端所需要的。</li><li>我们需要直接从数据库中检索出转换、计算或格式化过的数据；而不是检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</li><li>这就是计算字段发挥作用的所在了。与前面各章介绍过的列不同</li><li>计算字段并不实际存在于数据库表中。计算字段是运行时在 <code>SELECT</code> 语句内创建的。</li></ul><h3 id="拼接字段" tabindex="-1">拼接字段 <a class="header-anchor" href="#拼接字段" aria-label="Permalink to &quot;拼接字段&quot;">​</a></h3><ul><li>在 <code>MySQL</code> 的 <code>SELECT</code> 语句中，可使用 <code>Concat()</code> 函数来拼接两个列。</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONCAT</span><span style="color:#A6ACCD;">(vend_name,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, vend_country, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> vendors </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>Concat()</code>需要一个或多个指定的串，各个串之间用逗号分隔。上面的 <code>SELECT</code> 语句连接以下 4 个元素： <ul><li>存储在 <code>vend_name</code> 列中的名字；</li><li>包含一个空格和一个左圆括号的串；</li><li>存储在 <code>vend_country</code> 列中的国家；</li><li>包含一个右圆括号的串。</li></ul></li></ul><h3 id="使用别名" tabindex="-1">使用别名 <a class="header-anchor" href="#使用别名" aria-label="Permalink to &quot;使用别名&quot;">​</a></h3><ul><li>别名（alias）是一个字段或值的替换名。别名用 AS 关键字赋予</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONCAT</span><span style="color:#A6ACCD;">(vend_name,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, vend_country, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> vend_title </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> vendors </span><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,43);function T(L,S,O,N,P,f){const l=t("font");return c(),r("div",null,[d,s("ul",null,[s("li",null,[s("p",null,[a("最常使用的通配符是百分号 "),C,a("。在搜索串中，"),y,a(" 表示"),n(l,{color:"#32CD32"},{default:e(()=>[A]),_:1}),a("出现"),n(l,{color:"#32CD32"},{default:e(()=>[u]),_:1})])]),D]),h,s("ul",null,[s("li",null,[a("除了一个或多个字符外，% 还能匹配 0 个字符。% 代表搜索模式中给定位置的"),n(l,{color:"#32CD32"},{default:e(()=>[F]),_:1}),a("。")])]),b,s("ul",null,[s("li",null,[a("另一个有用的通配符是下划线 _ 。下划线的用途与%一样，但下划线只匹配"),n(l,{color:"#32CD32"},{default:e(()=>[m]),_:1}),a("。")]),E]),v,s("div",g,[_,s("ul",null,[R,s("li",null,[a("为区分大小写，可使用 "),n(l,{color:"#32CD32"},{default:e(()=>[q]),_:1}),a(" 关键字，如 WHERE prod_name REGEXP BINARY 'JetPack .000'。")])])]),k])}const M=p(i,[["render",T]]);export{I as __pageData,M as default};
