import{_ as s,o as a,c as l,V as n}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"JS 基础知识总结","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/javascript-base.md","filePath":"JavaScript/javascript-base.md","lastUpdated":1716371265000}'),o={name:"JavaScript/javascript-base.md"},e=n(`<h1 id="js-基础知识总结" tabindex="-1">JS 基础知识总结 <a class="header-anchor" href="#js-基础知识总结" aria-label="Permalink to &quot;JS 基础知识总结&quot;">​</a></h1><h2 id="一、原始数据类型" tabindex="-1">一、原始数据类型 <a class="header-anchor" href="#一、原始数据类型" aria-label="Permalink to &quot;一、原始数据类型&quot;">​</a></h2><ul><li>boolean</li><li>string</li><li>number</li><li>null</li><li>undefined</li><li>bigint (提案中)</li><li>symbol (ES6 引入表示独一无二的值)</li></ul><h2 id="二、引用数据类型-对象-object" tabindex="-1">二、引用数据类型(对象 Object) <a class="header-anchor" href="#二、引用数据类型-对象-object" aria-label="Permalink to &quot;二、引用数据类型(对象 Object)&quot;">​</a></h2><ul><li>普通对象 Object</li><li>数组对象 Array</li><li>正则对象 RegExp</li><li>日期对象 Date</li><li>数学函数 Math</li><li>函数对象 Function</li></ul><h2 id="三、为什么-typeof-null-结果是-object" tabindex="-1">三、为什么 typeof(null) 结果是 object？ <a class="header-anchor" href="#三、为什么-typeof-null-结果是-object" aria-label="Permalink to &quot;三、为什么 typeof(null) 结果是 object？&quot;">​</a></h2><p>解释: 虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。<strong><em>在 JS 的最初版本中使用的是 32 位系统，为了性能考虑</em></strong> 使用低位存储变量的类型信息， <strong><em>000 开头代表是对象</em></strong> 然而 null 表示为全零，所以将它错误的判断为 object 。</p><div class="tip custom-block"><p class="custom-block-title">面试题</p><p>用 <code>typeof(jing) === &#39;object&#39;</code> 来判断 <code>jing</code> 是不是 <code>object</code> 有没有风险？为什么？</p></div><h2 id="四、js-隐式类型转换" tabindex="-1">四、js 隐式类型转换 <a class="header-anchor" href="#四、js-隐式类型转换" aria-label="Permalink to &quot;四、js 隐式类型转换&quot;">​</a></h2><p>JavaScript 提供三种不同的值比较操作：</p><ul><li>严格相等 (&quot;triple equals&quot; 或 &quot;identity&quot;)，使用 === ,</li><li>宽松相等 (&quot;double equals&quot;) ，使用 ==</li><li>以及 Object.is （ECMAScript 2015/ ES6 新特性）</li></ul><div class="danger custom-block"><p class="custom-block-title">注意注意</p><p>Object.is（NaN，NaN）将为 true</p></div><h3 id="隐式类型转换规则" tabindex="-1">隐式类型转换规则 <a class="header-anchor" href="#隐式类型转换规则" aria-label="Permalink to &quot;隐式类型转换规则&quot;">​</a></h3><ul><li>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值 <code>false</code> 转换为 0，而 <code>true</code> 转换为 1。</li><li>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值。</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的 <code>valueOf()</code> 方法，用得到的基本类型值按照前面的规则进行比较。</li></ul><p><strong>这两个操作符在进行比较时则要遵循下列规则。</strong></p><ul><li><code>null</code> 和 <code>undefined</code> 是相等的</li><li>要比较相等性之前，不能将 <code>null</code> 和 <code>undefined</code> 转换成其他任何值</li><li>如果有一个操作数是 <code>NaN</code>，则相等操作符返回 <code>false</code> ，而不相等操作符返回 <code>true</code>。</li><li><strong>重要提示：</strong> 即使两个操作数都是 <code>NaN</code>，相等操作符也返回 <code>false</code> 了；因为按照规则， <code>NaN</code> 不等于 <code>NaN</code>。</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回 <code>true</code> ，否则返回 false</li></ul><div class="danger custom-block"><p class="custom-block-title">注意点</p><p>false、0、空字符串（&quot;&quot;）、NaN、null 和 undefined 被转换为 false 所有其他值被转换为 true</p></div><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><p><strong>1、[] == ! [] 的结果为什么会是 true</strong></p><p>①、根据运算符优先级 ，！ 的优先级是大于 == 的，所以先会执行 ![]</p><p><strong><em>！可将变量转换成 boolean 类型，null、undefined、NaN 以及空字符串(&#39;&#39;)取反都为 true，其余都为 false。</em></strong></p><p>所以 ! [] 运算后的结果就是 false</p><p>也就是 [] == ! [] 相当于 [] == false</p><p>②、根据上面提到的规则（如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为 0，而 true 转换为 1），则需要把 false 转成 0</p><p>也就是 [] == ! [] 相当于 [] == false 相当于 [] == 0</p><p>③、根据上面提到的规则（如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法，用得到的基本类型值按照前面的规则进行比较，如果对象没有 valueOf()方法，则调用 toString()）</p><p>而对于空数组，[].toString() -&gt; &#39;&#39; (返回的是空字符串)</p><p>也就是 [] == 0 相当于 &#39;&#39; == 0</p><p>④、根据上面提到的规则（如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值）</p><p>Number(&#39;&#39;) -&gt; 返回的是 0</p><p>相当于 0 == 0 自然就返回 true 了</p><p><strong>2、null === null</strong></p><h2 id="五、null-和-undefined-的区别" tabindex="-1">五、null 和 undefined 的区别 <a class="header-anchor" href="#五、null-和-undefined-的区别" aria-label="Permalink to &quot;五、null 和 undefined 的区别&quot;">​</a></h2><ul><li><code>null</code> 表示一个 <code>&quot;无&quot;</code> 的对象，也就是该处不应该有值；而 <code>undefined</code> 表示未定义。</li><li>在转换为数字时结果不同，<code>Number(null)</code> 为 0，而 <code>undefined</code> 为 <code>NaN</code>。</li></ul><p>使用场景上：</p><p><code>null：</code></p><ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。</li></ul><p><code>undefined:</code></p><ul><li>变量被声明了，但没有赋值时，就等于 undefined。</li><li>对象没有赋值属性，该属性的值为 undefined。</li><li>函数没有返回值时，默认返回 undefined。</li></ul><h2 id="六、0-1-0-2-0-3" tabindex="-1">六、0.1 + 0.2 === 0.3? <a class="header-anchor" href="#六、0-1-0-2-0-3" aria-label="Permalink to &quot;六、0.1 + 0.2 === 0.3?&quot;">​</a></h2><ul><li>JavaScript 的 Number 类型使用的是双精度浮点型。</li><li>在 JS 中 0.1 和 0.2 都是偏大的，所以 0.1 + 0.2 &gt; 0.3。</li></ul><h3 id="解决办法" tabindex="-1">解决办法： <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法：&quot;">​</a></h3><p><strong>toFixed</strong></p><p>在 <code>JavaScript</code> 原生方法中提供了一个方法：<code>Number.prototype.toFixed()</code><code>toFixed()</code> 方法使用定点表示法来格式化一个数 语法如下：</p><p><code>numObj.toFixed(digits)</code></p><p>其中参数 <code>digits</code> 是小数点后数字的个数：介于 0 到 20 之间。 返回的是一个数值的字符串形式，所以需要将结果强制转换为浮点型。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//结果为0.3</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">0.3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 结果为 3</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">0.7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">180</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//结果为126</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.9</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 结果为 0.1</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">9.7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 结果为 970</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">2.22</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 结果为 2.32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>计算机中使用 IEEE754 标准实现的浮点型存储都会有这个问题：</p><p>用二进制来存储小数，而大部分小数转成二进制之后都是无限循环的值，因此存在取舍问题，也就是精度丢失。 从而使得 0.1 + 0.2 !== 0.3。</p><h2 id="七、object-assign-详解" tabindex="-1">七、Object.assign()详解 <a class="header-anchor" href="#七、object-assign-详解" aria-label="Permalink to &quot;七、Object.assign()详解&quot;">​</a></h2><h3 id="object-assign-方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象-返回的是目标对象。" tabindex="-1">Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象，返回的是目标对象。 <a class="header-anchor" href="#object-assign-方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象-返回的是目标对象。" aria-label="Permalink to &quot;Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象，返回的是目标对象。&quot;">​</a></h3><ul><li>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</li></ul><div class="danger custom-block"><p class="custom-block-title">注意</p><p>Object.assign 不会在那些 source 对象值为 null 或 undefined 的时候抛出错误。</p></div><h3 id="拷贝问题" tabindex="-1">拷贝问题 <a class="header-anchor" href="#拷贝问题" aria-label="Permalink to &quot;拷贝问题&quot;">​</a></h3><ul><li><p>Object.assign() 不是深拷贝。因为 Object.assign() 拷贝的是（可枚举）属性值。</p></li><li><p>假如源对象中的某个值是一个对象的引用，它仅仅会复制它的引用值。</p></li><li><p>原始类型会被包装为对象</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> v1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> v2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> v3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> v4)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原始类型会被包装，null 和 undefined 会被忽略。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// { &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这段代码中，<code>Object.assign</code> 方法用于将一个或多个源对象的所有可枚举属性复制到目标对象。其语法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">sources)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>target</code> 是目标对象，<code>sources</code> 是一个或多个源对象。</p><p>在这段代码中，目标对象是一个空对象 <code>{}</code>，而源对象是 <code>v1</code>, <code>null</code>, <code>v2</code>, <code>undefined</code>, <code>v3</code>, 和 <code>v4</code>。我们需要了解这些源对象是如何处理的：</p><ol><li><p><strong><code>v1 = &#39;abc&#39;</code></strong></p><ul><li>JavaScript 中的字符串是原始类型，没有可枚举属性。但是，字符串在一些特定情况下会被临时包装为对象。这种临时包装的对象具有类似数组的索引属性（从 <code>0</code> 开始），其属性值为字符串的字符。</li><li>因此，当字符串 <code>v1</code> 被传递给 <code>Object.assign</code> 时，它会被包装成一个临时的 String 对象，具有如下可枚举属性：<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><p><strong><code>null</code> 和 <code>undefined</code></strong></p><ul><li>这两个值在 JavaScript 中是被忽略的。当 <code>null</code> 或 <code>undefined</code> 被传递给 <code>Object.assign</code> 时，它们不会产生任何影响，不会向目标对象添加任何属性。</li></ul></li><li><p><strong><code>v2 = true</code></strong></p><ul><li>布尔值也是原始类型，没有可枚举属性。布尔值在传递给 <code>Object.assign</code> 时不会向目标对象添加任何属性。</li></ul></li><li><p><strong><code>v3 = 10</code></strong></p><ul><li>数值类型也是原始类型，没有可枚举属性。数值在传递给 <code>Object.assign</code> 时不会向目标对象添加任何属性。</li></ul></li><li><p><strong><code>v4 = Symbol(&#39;foo&#39;)</code></strong></p><ul><li>Symbol 类型也是原始类型，没有可枚举属性。Symbol 在传递给 <code>Object.assign</code> 时不会向目标对象添加任何属性。</li></ul></li></ol><p>结合以上分析，当这些源对象传递给 <code>Object.assign</code> 时，只有字符串 <code>v1</code> 的临时包装对象会向目标对象添加属性，而其他原始类型、<code>null</code> 和 <code>undefined</code> 都不会影响目标对象。因此，最终的 <code>obj</code> 只包含 <code>v1</code> 的属性：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> v1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> v2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> v3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> v4)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 结果是:</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// { &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个结果表示 <code>obj</code> 对象拥有来自 <code>v1</code> 字符串的三个属性：键为 &quot;0&quot;、&quot;1&quot; 和 &quot;2&quot;，对应的值分别是 &quot;a&quot;、&quot;b&quot; 和 &quot;c&quot;。</p><h2 id="math-random-的安全风险" tabindex="-1">Math.random 的安全风险 <a class="header-anchor" href="#math-random-的安全风险" aria-label="Permalink to &quot;Math.random 的安全风险&quot;">​</a></h2><p><a href="https://www.zhangxinxu.com/wordpress/2021/12/js-getrandomvalue-math-random/" target="_blank" rel="noreferrer">见张鑫旭大佬文章</a></p>`,67),p=[e];function t(c,r,i,d,u,y){return a(),l("div",null,p)}const F=s(o,[["render",t]]);export{C as __pageData,F as default};
