import{_ as l,o as i,c as e,V as o}from"./chunks/framework.364d6ed5.js";const p=JSON.parse('{"title":"HTML 大杂烩","description":"","frontmatter":{},"headers":[],"relativePath":"HTML/HTML集合.md","filePath":"HTML/HTML集合.md","lastUpdated":1690471787000}'),c={name:"HTML/HTML集合.md"},t=o('<h1 id="html-大杂烩" tabindex="-1">HTML 大杂烩 <a class="header-anchor" href="#html-大杂烩" aria-label="Permalink to &quot;HTML 大杂烩&quot;">​</a></h1><h2 id="一、inline-元素、block-元素、inline-block-元素的具体解释" tabindex="-1">一、inline 元素、block 元素、inline-block 元素的具体解释 <a class="header-anchor" href="#一、inline-元素、block-元素、inline-block-元素的具体解释" aria-label="Permalink to &quot;一、inline 元素、block 元素、inline-block 元素的具体解释&quot;">​</a></h2><h3 id="inline-元素" tabindex="-1">inline 元素 <a class="header-anchor" href="#inline-元素" aria-label="Permalink to &quot;inline 元素&quot;">​</a></h3><p><code>inline</code> 元素全称<code>Inline Elements</code>。一个内联元素不会开始新的一行，并且只占有必要的宽度。</p><ul><li><p>特点:</p><ul><li>和其他元素都在一行上。</li><li>元素的高度、宽度、行高及顶部和底部边距不可设置。</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li></ul></li></ul><h3 id="block-元素" tabindex="-1">block 元素 <a class="header-anchor" href="#block-元素" aria-label="Permalink to &quot;block 元素&quot;">​</a></h3><p><code>block</code> 元素全称 <code>Block-level Elements</code>，一个块级元素总是开始新的一行，并且占据可获得的全部宽度(左右都会尽可能的延伸到它能延伸的最远)</p><ul><li><p>特点:</p><ul><li>每个块级元素都从新的一行开始，并且其后的元素也另起一行。（一个块级元素独占一行）;</li><li>元素的高度、宽度、行高以及顶和底边距都可设置;</li><li>元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。</li></ul></li></ul><h3 id="inline-block-元素" tabindex="-1">inline-block 元素 <a class="header-anchor" href="#inline-block-元素" aria-label="Permalink to &quot;inline-block 元素&quot;">​</a></h3><ul><li><p>inline-block 元素，它像内联元素，但具有宽度和高度。</p></li><li><p>特点:</p><ul><li>和其他元素都在一行上；</li><li>元素的高度、宽度、行高以及顶和底边距都可设置</li></ul></li></ul><h2 id="二、常见的-inline-元素、block-元素、inline-block-元素" tabindex="-1">二、常见的 inline 元素、block 元素、inline-block 元素 <a class="header-anchor" href="#二、常见的-inline-元素、block-元素、inline-block-元素" aria-label="Permalink to &quot;二、常见的 inline 元素、block 元素、inline-block 元素&quot;">​</a></h2><h3 id="inline-元素-内联元素" tabindex="-1">Inline 元素（内联元素）： <a class="header-anchor" href="#inline-元素-内联元素" aria-label="Permalink to &quot;Inline 元素（内联元素）：&quot;">​</a></h3><ul><li><code>&lt;span&gt;</code>: 用于标记文本的一部分，常用于设置特定文本样式或添加小的修饰性元素。</li><li><code>&lt;a&gt;</code>: 创建超链接，用于导航到其他页面或资源。</li><li><code>&lt;strong&gt;</code>: 表示强调文本。</li><li><code>&lt;em&gt;</code>: 表示斜体强调文本。</li><li><code>&lt;img&gt;</code>: 用于插入图片。</li><li><code>&lt;input&gt;</code>: 表单输入元素，如文本输入框、复选框等。</li></ul><h3 id="block-元素-块级元素" tabindex="-1">Block 元素（块级元素）： <a class="header-anchor" href="#block-元素-块级元素" aria-label="Permalink to &quot;Block 元素（块级元素）：&quot;">​</a></h3><ul><li><code>&lt;div&gt;</code>: 用于将内容组织成块，常用于布局目的或分隔不同部分。</li><li><code>&lt;p&gt;</code>: 表示段落。</li><li><code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, ..., <code>&lt;h6&gt;</code>: 表示标题，从大到小依次递减。</li><li><code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>: 分别表示无序列表和有序列表以及列表项。</li><li><code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code>: 表示表格、表格行和表格单元格。</li></ul><h3 id="inline-block-元素-内联块级元素" tabindex="-1">Inline-block 元素（内联块级元素）： <a class="header-anchor" href="#inline-block-元素-内联块级元素" aria-label="Permalink to &quot;Inline-block 元素（内联块级元素）：&quot;">​</a></h3><ul><li><code>&lt;span&gt;</code>: 和上面提到的一样，但是它可以被设置成内联块级元素。</li><li><code>&lt;img&gt;</code>: 和上面提到的一样，但是它可以被设置成内联块级元素。</li><li><code>&lt;input&gt;</code>: 和上面提到的一样，但是它可以被设置成内联块级元素。</li></ul><h2 id="三、inline-元素、block-元素、inline-block-元素的区别" tabindex="-1">三、inline 元素、block 元素、inline-block 元素的区别 <a class="header-anchor" href="#三、inline-元素、block-元素、inline-block-元素的区别" aria-label="Permalink to &quot;三、inline 元素、block 元素、inline-block 元素的区别&quot;">​</a></h2><ul><li><p>块级元素会独占一行，而内联元素和内联块元素则会在一行内显示。</p></li><li><p>块级元素和内联块元素可以设置 width、height 属性，而内联元素设置无效。</p></li><li><p>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。</p></li></ul><h2 id="四、能够跨域引入资源的-html-标签" tabindex="-1">四、能够跨域引入资源的 HTML 标签 <a class="header-anchor" href="#四、能够跨域引入资源的-html-标签" aria-label="Permalink to &quot;四、能够跨域引入资源的 HTML 标签&quot;">​</a></h2><ul><li><code>&lt;img&gt;</code>：用于显示图像。可以加载来自其他域的图像并在页面上显示。</li><li><code>&lt;script&gt;</code>：用于加载外部 <code>JavaScript</code> 文件。可以引入其他域上的 <code>JavaScript</code> 脚本文件，并在页面中使用。</li><li><code>&lt;link&gt;</code>：用于加载外部样式表。可以引入其他域上的 <code>CSS</code> 文件，以应用样式到页面上。</li><li><code>&lt;audio&gt;</code>：用于嵌入音频内容。可以加载其他域上的音频文件并在页面上播放。</li><li><code>&lt;video&gt;</code>：用于嵌入视频内容。可以加载其他域上的视频文件并在页面上播放。</li><li><code>&lt;iframe&gt;</code>：用于嵌入另一个文档。可以加载其他域上的网页并在页面中嵌入显示。</li></ul><p>这些标签在浏览器中有相应的安全例外，允许加载和展示来自其他域的资源。但是，请注意，虽然这些标签允许在页面上展示跨域资源，但对于执行一些读取操作（例如使用 <code>getImageData</code> 方法）或执行一些需要敏感权限的操作，仍然会受到同源策略的限制。</p>',22),a=[t];function n(d,r,h,b,k,u){return i(),e("div",null,a)}const g=l(c,[["render",n]]);export{p as __pageData,g as default};
