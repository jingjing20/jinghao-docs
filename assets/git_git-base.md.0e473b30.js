import{_ as s}from"./chunks/image-20220831154423339.52d618dc.js";import{_ as a,o as l,c as n,V as e}from"./chunks/framework.364d6ed5.js";const o="/assets/image.7261a148.png",h=JSON.parse('{"title":"常用 Git 命令","description":"","frontmatter":{},"headers":[],"relativePath":"git/git-base.md","filePath":"git/git-base.md","lastUpdated":1701400457000}'),p={name:"git/git-base.md"},t=e(`<h1 id="常用-git-命令" tabindex="-1">常用 Git 命令 <a class="header-anchor" href="#常用-git-命令" aria-label="Permalink to &quot;常用 Git 命令&quot;">​</a></h1><h2 id="git-config" tabindex="-1">git config <a class="header-anchor" href="#git-config" aria-label="Permalink to &quot;git config&quot;">​</a></h2><p>查看仓库的用户名</p><ul><li>git config user.name</li></ul><p>查看仓库的邮箱</p><ul><li>git config user.email</li></ul><h3 id="git-config-global" tabindex="-1">git config --global <a class="header-anchor" href="#git-config-global" aria-label="Permalink to &quot;git config --global&quot;">​</a></h3><p>设置全局 git 用户信息</p><ul><li>git config --global user.name &#39;jingjing20&#39;</li><li>git config --global user.email &#39;1269928993@qq.com&#39;</li></ul><h3 id="git-config-local" tabindex="-1">git config --local <a class="header-anchor" href="#git-config-local" aria-label="Permalink to &quot;git config --local&quot;">​</a></h3><p>设置某个仓库 git 用户信息</p><ul><li>git config --local user.name &#39;jingjing20&#39;</li><li>git config --local user.email &#39;1269928993@qq.com&#39;</li></ul><div class="danger custom-block"><p class="custom-block-title">优先级</p><p>local &gt; global</p></div><h2 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h2><h3 id="git-add-git-commit-后想撤销怎么办" tabindex="-1">git add / git commit 后想撤销怎么办？ <a class="header-anchor" href="#git-add-git-commit-后想撤销怎么办" aria-label="Permalink to &quot;git add / git commit 后想撤销怎么办？&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">soft HEAD</span><span style="color:#89DDFF;">~</span><span style="color:#F78C6C;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>这样就成功的撤销了你的 <code>commit</code></li><li>注意，仅仅是撤回 <code>commit</code> 操作，您写的代码仍然保留。</li><li><code>HEAD~1</code> 中的 1 代表撤销一次 <code>commit</code></li></ul><blockquote><p>参数的意义如下：</p></blockquote><p><strong><em>--mixed</em></strong></p><ul><li>不删除工作空间改动代码，撤销 <code>commit</code>，并且撤销 <code>git add .</code> 操作。</li><li>这个为默认参数，<code>git reset --mixed HEAD~1</code> 和 <code>git reset HEAD~1</code> 效果是一样的。</li></ul><p><strong><em>--soft</em></strong></p><ul><li>不删除工作空间改动代码，撤销 <code>commit</code>，不撤销 <code>git add .</code></li></ul><p><strong><em>--hard</em></strong></p><ul><li>删除工作空间改动代码，撤销 <code>commit</code>，撤销 <code>git add .</code></li><li>注意完成这个操作后，就恢复到了上一次的 <code>commit</code> 状态。</li></ul><h3 id="只是想改-commit-的描述信息" tabindex="-1">只是想改 commit 的描述信息？ <a class="header-anchor" href="#只是想改-commit-的描述信息" aria-label="Permalink to &quot;只是想改 commit 的描述信息？&quot;">​</a></h3><p>如果 commit 注释写错了，只是想改一下注释，只需要 <code>git commit --amend</code>，此时会进入默认 <code>vim</code> 编辑器，修改注释完毕后保存就好了。</p><h2 id="git-log-vs-git-reflog" tabindex="-1">git log VS git reflog <a class="header-anchor" href="#git-log-vs-git-reflog" aria-label="Permalink to &quot;git log VS git reflog&quot;">​</a></h2><ul><li>假设一个场景如下： <strong>在我实习的时候，我本地的某个开发分支 A 被误删了， A 分支里面的代码没有 <code>push</code> 到远程，我该如何找回之前 A 的提交记录和代码呢？</strong></li></ul><details class="details custom-block"><summary>答案</summary><ul><li><code>git reflog</code> 可以查看所有分支的所有操作记录（包括已经被删除的 <code>commit</code> 记录和 <code>reset</code> 的操作）</li><li>例如执行 <code>git reset --hard HEAD~1</code>，退回到上一个版本，用 <code>git log</code> 则是看不出来被删除的<code>commitid</code></li><li>用 <code>git reflog</code> 则可以看到被删除的 <code>commitid</code>，我们就可以买后悔药，恢复到被删除的那个版本。</li></ul></details><h2 id="git-cherry-pick" tabindex="-1">git cherry-pick <a class="header-anchor" href="#git-cherry-pick" aria-label="Permalink to &quot;git cherry-pick&quot;">​</a></h2><ul><li>在公司多人协作开发项目的时候，将代码从一个分支转移到另一个分支是常见需求，这时分两种情况。</li><li>一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。</li><li>另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 git cherry-pick。</li><li><code>git cherry-pick</code> 命令的作用，就是将指定的提交（commit）应用于其他分支。 我在实习过程中有一次写完代码发现自己写代码的分支错了、、、改动又有点多，不想重新切换分支写一遍。我就直接在当前分支提交了代码，然后到正确的功能分支上用 <code>git log</code> 查到那次代码提交的 <code>commitHash</code>，然后用<code>git cherry-pick &lt;commitHash&gt;</code> 这个命令把这次提交的代码合入当前正确的功能分支。</li></ul><p>更多用法参考阮一峰大神的文章: <a href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p><h2 id="git-stash-用法解析" tabindex="-1">git stash 用法解析 <a class="header-anchor" href="#git-stash-用法解析" aria-label="Permalink to &quot;git stash 用法解析&quot;">​</a></h2><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>1、当正在<code>dev</code>分支上开发某个项目，这时项目中出现一个<code>bug</code>，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用<code>git stash</code>命令将修改的内容保存至堆栈区，然后顺利切换到<code>hotfix</code>分支进行<code>bug</code>修复，修复完成后，再次切回到<code>dev</code>分支，从堆栈中恢复刚刚保存的内容。</li><li>2、由于你的疏忽，本应该在<code>dev</code>分支开发的内容，却在<code>master</code>上进行了开发，需要重新切回到<code>dev</code>分支上进行开发，可以用<code>git stash</code>将内容保存至堆栈中，切回到<code>dev</code>分支后，再次恢复内容即可。 总的来说，<code>git stash</code>命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash 中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。<code>git stash</code>作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。</li></ul><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><ul><li>1、git stash 能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</li><li>2、git stash save 作用等同于 git stash，区别是可以加一些注释，如下：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash的效果：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Saved working directory and index state WIP on </span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 5feb75c update </span><span style="color:#F78C6C;">2021</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">27</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git stash save “jingjing”的效果：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Saved working directory and index state On </span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> jingjing</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>3、git stash list 查看当前 stash 中的内容</p></li><li><p>4、git stash pop 将当前 stash 中的内容弹出，并应用到当前分支对应的工作目录上。注意：该命令将堆栈中最近保存的内容删除（栈是先进后出）</p></li><li><p>5、git stash apply 将堆栈中的内容应用到当前目录，不同于 git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。还可以使用 git stash apply + stash 名字（如 stash@{jingjing}）指定恢复哪个 stash 到当前的工作目录。</p></li><li><p>6、git stash drop + 名称 从堆栈中移除某个指定的 stash</p></li><li><p>7、git stash clear 清除堆栈中的所有内容</p></li></ul><h2 id="git-branch" tabindex="-1">git branch <a class="header-anchor" href="#git-branch" aria-label="Permalink to &quot;git branch&quot;">​</a></h2><ul><li>修改本地分支名</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m oldBranch newBranch    </span><span style="color:#676E95;font-style:italic;">//修改本地分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>删除本地分支</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">D branchName    </span><span style="color:#676E95;font-style:italic;">//删除本地分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>删除远程分支</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#89DDFF;">--delete</span><span style="color:#A6ACCD;"> origin oldBranch   </span><span style="color:#676E95;font-style:italic;">//删除远程分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>将本地新分支名 push 到远程分支</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">upstream origin newBranch  </span><span style="color:#676E95;font-style:italic;">//将本地新分支名 push 到远程分支（会在远程仓库新建新分支名的分支）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-merge" tabindex="-1">git merge <a class="header-anchor" href="#git-merge" aria-label="Permalink to &quot;git merge&quot;">​</a></h2><ul><li>git merge 后还没提交又不想 merge 这次的代码</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">abort</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-commit" tabindex="-1">git commit <a class="header-anchor" href="#git-commit" aria-label="Permalink to &quot;git commit&quot;">​</a></h2><h3 id="git-修改某次-commit-的用户和邮箱地址及评注信息" tabindex="-1"><code>Git</code> 修改某次 <code>commit</code> 的用户和邮箱地址及评注信息 <a class="header-anchor" href="#git-修改某次-commit-的用户和邮箱地址及评注信息" aria-label="Permalink to &quot;\`Git\` 修改某次 \`commit\` 的用户和邮箱地址及评注信息&quot;">​</a></h3><p>**基于以下提交 log **</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">a0c9d8cfe0ca7151519aae4dd6d57188064a5c1</span><span style="color:#A6ACCD;"> (HEAD -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/main,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/HEAD</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Author:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wangzhihao</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">1269928993@qq.co</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">Tue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Aug</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#C3E88D;">:43:49</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2022</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+0800</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">chore:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compiler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">db01629dcefee1cdd4e6f73668dc31c6d02d6364</span></span>
<span class="line"><span style="color:#FFCB6B;">Author:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jingjing20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">1269928993@qq.co</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">Mon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Aug</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">29</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">13</span><span style="color:#C3E88D;">:18:01</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2022</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+0800</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">update:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">observer</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">e0cf83404fc909a8f340fe9375498788423f44fb</span></span>
<span class="line"><span style="color:#FFCB6B;">Author:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jingjing20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">1269928993@qq.co</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">Sun</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Aug</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">28</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">00</span><span style="color:#C3E88D;">:24:12</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2022</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+0800</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">updata:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">初始化</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mini-vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>操作步骤</strong></p><ul><li>1、找到要修改的 <code>commit</code> ，本例中的 <code>1a0c9d8cfe0ca7151519aae4dd6d57188064a5c1</code> 。</li><li>2、执行 git rebase -i &lt;要修改的 commitId 的前一个 commitid&gt;，这里的 <code>db01629dcefee1cdd4e6f73668dc31c6d02d6364</code>。这里即执行如下命令：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">db01629dcefee1cdd4e6f73668dc31c6d02d636</span><span style="color:#89DDFF;">4&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>3、在 <code>rebase</code> 的交互模式下，将要修改的 <code>commit</code> 状态由 <code>pick </code> 修改为 <code>edit</code>。</li><li>4、修改后，保存退出<code>rebase</code>交互模式，我们会停在该<code>commit</code>下（下图中的 <code>Stopped at 27f749c... chore: class compiler</code>），并执行修复操作。</li></ul><p><img src="`+s+`" alt="image-20220831154423339"></p><ul><li><p>我们可以进行不同的修改</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">改作者和邮件地址：git commit </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">amend </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">“Author Name email@address</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com”</span></span>
<span class="line"><span style="color:#A6ACCD;">改日期时间：git commit </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">amend </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">“Thu</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">07</span><span style="color:#A6ACCD;"> Apr </span><span style="color:#F78C6C;">2005</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0200</span><span style="color:#A6ACCD;">”</span></span>
<span class="line"><span style="color:#A6ACCD;">改commit评注：git commit </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">amend </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m “New Commit Message”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>修改完后执行<code> git rebase --continue</code></p></li><li><p>最后将修改强制推送到远程仓库 <code>git push origin master --force</code></p></li></ul><h3 id="根据某个-特殊字符查询历史-commit" tabindex="-1">根据某个 <span style="color:#00FF00;">特殊字符查询历史 commit</span> <a class="header-anchor" href="#根据某个-特殊字符查询历史-commit" aria-label="Permalink to &quot;根据某个 &lt;span style=&quot;color: #00FF00&quot;&gt;特殊字符查询历史 commit&lt;/span&gt;&quot;">​</a></h3><p>要查询 Git 历史的 commit 信息中是否包含特定字符，您可以使用 <code>git log</code> 命令结合 <code>--grep</code> 选项。以下是如何执行这个查询的步骤：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--grep=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">特定字符</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>在上述命令中，将 &quot;特定字符&quot; 替换为您要搜索的实际字符串。执行这个命令后，Git 将显示包含指定字符的所有 commit 信息。</p></li><li><p>如果要进一步筛选结果，您可以添加其他选项。例如，您可以使用 <code>--author</code> 选项来筛选特定作者的提交，或使用 <code>--since</code> 和 <code>--until</code> 选项来限定日期范围。</p></li><li><ol><li>查询 commit 中包含字符串 &quot;bug&quot; 的信息：</li></ol></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--grep=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bug</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><ol start="2"><li>查询 commit 中包含字符串 &quot;feature&quot; 的信息，并限制日期范围：</li></ol></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--grep=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feature</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--since=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2022-01-01</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--until=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2022-12-31</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><ol start="3"><li>查询 commit 中包含字符串 &quot;fix&quot; 并由特定作者提交的信息：</li></ol></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--grep=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--author=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John Doe</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-批量删除分支" tabindex="-1">git 批量删除分支 <a class="header-anchor" href="#git-批量删除分支" aria-label="Permalink to &quot;git 批量删除分支&quot;">​</a></h2><h3 id="批量删除本地分支" tabindex="-1">批量删除本地分支 <a class="header-anchor" href="#批量删除本地分支" aria-label="Permalink to &quot;批量删除本地分支&quot;">​</a></h3><ul><li>直接命令行执行</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feature/jing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">xargs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>封装成脚本</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取所有分支（排除主分支）</span></span>
<span class="line"><span style="color:#A6ACCD;">branches</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> branch </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#C3E88D;"> -v </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main\\|master</span><span style="color:#89DDFF;">&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 循环删除每个分支</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> branch </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> $branches</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> $branch</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="批量删除远程分支" tabindex="-1">批量删除远程分支 <a class="header-anchor" href="#批量删除远程分支" aria-label="Permalink to &quot;批量删除远程分支&quot;">​</a></h3><ul><li>直接命令行执行</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cluster_manage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s/origin\\///g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">xargs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>封装成脚本</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取所有远程分支（排除主分支）</span></span>
<span class="line"><span style="color:#A6ACCD;">branches</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> branch -r </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#C3E88D;"> -v </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">origin/main\\|origin/master</span><span style="color:#89DDFF;">&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 循环删除每个远程分支</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> branch </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> $branches</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">    remote_branch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">echo</span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;">$branch</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">sed</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s/origin\\///</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--delete</span><span style="color:#A6ACCD;"> $remote_branch</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="git-clone-depth" tabindex="-1">git clone --depth <a class="header-anchor" href="#git-clone-depth" aria-label="Permalink to &quot;git clone --depth&quot;">​</a></h2><ul><li><p>我在拉取 react 项目代码的时候，发现 react 仓库太大，直接 clone 下来太费时间。</p></li><li><p>在执行 <code>git clone</code> 命令时，可以指定 <code>--depth</code> 选项</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--depth</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/facebook/react</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>这样只会拉取最新的提交，你会发现拉完之后不能切换到其他分支或者 commit</p></li><li><p>可以再在终端执行</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--unshallow</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>执行完成之后本地就会有所有的提交记录了。</li></ul><p><img src="`+o+'" alt="Alt text"></p><h2 id="git-设置别名-alias" tabindex="-1">git 设置别名 alias <a class="header-anchor" href="#git-设置别名-alias" aria-label="Permalink to &quot;git 设置别名 alias&quot;">​</a></h2><ul><li>实现切换分支的同时拉取最新代码的别名</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">alias.cop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!f() { git checkout $1 &amp;&amp; git pull; }; f</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',91),c=[t];function r(i,C,d,y,D,u){return l(),n("div",null,c)}const b=a(p,[["render",r]]);export{h as __pageData,b as default};
