import{_ as r,H as c,o as t,c as F,C as s,a as n,J as p,E as o,t as D,V as a}from"./chunks/framework.92369faf.js";const B=JSON.parse('{"title":"vue生命周期函数","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/vuelife.md","filePath":"Vue/vuelife.md","lastUpdated":1686887724000}'),y={name:"Vue/vuelife.md"},i=a("",6),A={class:"danger custom-block"},b=s("p",{class:"custom-block-title"},"温馨提示",-1),C=s("em",null,[s("strong",null,"以简单直接的实例")],-1),u=a("",8),d=s("code",null,"<keep-alive>",-1),m=a("",7),h=s("code",null,"beforeMount",-1),g=s("code",null,"data",-1),_=s("code",null,"el ",-1),f=s("code",null,"el",-1),v=s("code",null,"Virtual DOM",-1),E=s("code",null,"mounted",-1),k=a("",5),q=a("",13);function T(e,V,$,j,P,x){const l=c("font");return t(),F("div",null,[i,s("div",A,[b,s("p",null,[n("官方给的东西肯定很官方啦，不过单看一张图对理解vue生命周期钩子函数来说肯定还是有些难度的。不过各位小伙伴不要着急，本文 "),s("strong",null,[p(l,{face:"黑体",color:"red",size:"3"},{default:o(()=>[C]),_:1})]),n(" 来对此图进行理解。")])]),u,s("p",null,[n("创建了一个 "),s("strong",null,[p(l,{face:"黑体",color:"red",size:"3"},{default:o(()=>[n("app")]),_:1})]),n(" 的Vue根实例，将其挂载到页面 id 为 app 的 Dom 元素上。 然后局部注册了一个组件名为 "),s("strong",null,[p(l,{face:"黑体",color:"red",size:"3"},{default:o(()=>[n("haohao")]),_:1})]),n(" 并在根实例中将其注册，使其可以在根实例的作用域中使用。 将子组件用 "),d,n(" 包裹，为接下来的测试作准备。")]),m,s("ul",null,[s("li",null,[s("p",null,[h,n(" 执行时："),g,n(" 和 "),_,n("均已经初始化，但从"),s("code",null,D(e.message),1),n(" 的展示情况可以看出此时 "),f,n(" 并没有渲染数据，这里就是应用的 "),v,n("（虚拟Dom）技术，先把坑占住了。到后面 "),E,n(" 挂载的时候再把值渲染上去")])]),k]),q])}const w=r(y,[["render",T]]);export{B as __pageData,w as default};
