import{_ as a,o as e,c as t,V as r}from"./chunks/framework.92369faf.js";const b=JSON.parse('{"title":"元字符的分类","description":"","frontmatter":{},"headers":[],"relativePath":"regular/元字符.md","filePath":"regular/元字符.md","lastUpdated":1686880555000}'),l={name:"regular/元字符.md"},o=r('<h1 id="元字符的分类" tabindex="-1">元字符的分类 <a class="header-anchor" href="#元字符的分类" aria-label="Permalink to &quot;元字符的分类&quot;">​</a></h1><h2 id="特殊单字符-注意-这部分都是匹配单个字符的" tabindex="-1">特殊单字符（注意：这部分都是匹配单个字符的） <a class="header-anchor" href="#特殊单字符-注意-这部分都是匹配单个字符的" aria-label="Permalink to &quot;特殊单字符（注意：这部分都是匹配单个字符的）&quot;">​</a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><ul><li>英文状态下的 . 表示匹配任意<em><strong>单个字符（换行除外）</strong></em></li></ul><h3 id="d" tabindex="-1">\\d <a class="header-anchor" href="#d" aria-label="Permalink to &quot;\\d&quot;">​</a></h3><ul><li><p>表示匹配任意<em><strong>单个数字</strong></em></p></li><li><p><code>\\w</code>表示匹配任意<strong>单个字母数字下划线</strong>，而 <code>\\W</code> 与之相反。</p></li><li><p>表示匹配任意<em><strong>单个字母数字下划线</strong></em></p></li></ul><h2 id="空白符" tabindex="-1">空白符 <a class="header-anchor" href="#空白符" aria-label="Permalink to &quot;空白符&quot;">​</a></h2><ul><li>在正则中，也是类似于 \\n 或 \\r 等方式来表示空白符号，只要记住它们就行了。平时使用正则，大部分场景使用 \\s 就可以满足需求，\\s 代表任意单个空白符号。</li></ul><h2 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h2><ul><li>在正则中，英文的星号（*）代表出现 0 到多次，加号（+）代表 1 到多次，问号（?）代表 0 到 1 次，{m,n}代表 m 到 n 次。</li></ul><h2 id="范围" tabindex="-1">范围 <a class="header-anchor" href="#范围" aria-label="Permalink to &quot;范围&quot;">​</a></h2><ul><li>首先是管道符号，我们用它来隔开多个正则，表示满足其中任意一个就行，比如 ab|bc 能匹配上 ab，也能匹配上 bc，在正则有多种情况时，这个非常有用。中括号[]代表多选一，可以表示里面的任意单个字符，所以任意元音字母可以用 [aeiou] 来表示。另外，中括号中，我们还可以用中划线表示范围，比如 [a-z] 可以表示所有小写字母。如果中括号第一个是脱字符（^），那么就表示非，表达的是不能是里面的任何单个元素。</li></ul>',12),i=[o];function n(s,d,h,c,u,_){return e(),t("div",null,i)}const p=a(l,[["render",n]]);export{b as __pageData,p as default};
