import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"vue2 原理源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue2-source-code.md","filePath":"vue/vue2-source-code.md","lastUpdated":1714462299000}'),p={name:"vue/vue2-source-code.md"},e=l(`<h1 id="vue2-原理源码解析" tabindex="-1">vue2 原理源码解析 <a class="header-anchor" href="#vue2-原理源码解析" aria-label="Permalink to &quot;vue2 原理源码解析&quot;">​</a></h1><h2 id="vue-set" tabindex="-1">Vue.set <a class="header-anchor" href="#vue-set" aria-label="Permalink to &quot;Vue.set&quot;">​</a></h2><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>由于 Vue 无法检测到对象属性的添加或删除。而 <code>Vue</code> 会在实例初始化时会对 <code>data</code> 对象属性执行 <code>getter/setter</code> 转化，所以初始化时 <code>data</code> 对象中存在数据才为响应式数据。那如果我们想要给对象添加新的属性并更新视图，就需要使用 <code>Vue.set</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propertyName </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或 vm.$set</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// vm为vue实例对象，如大部分.vue文件中，可直接使用 this.$set</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>target</code>： 要添加属性的目标对象或数组，不能是 <code>Vue</code> 实例（不允许动态添加根级响应式 property）<a href="https://github.com/vuejs/vue/blob/ec78fc8b6d03e59da669be1adf4b4b5abf670a34/src/core/observer/index.js#L217" target="_blank" rel="noreferrer">见源码</a></li><li><code>propertyName/index</code>：新添加的属性名或数组索引</li><li><code>value</code>：添加的值</li></ul><h3 id="失败场景" tabindex="-1">失败场景 <a class="header-anchor" href="#失败场景" aria-label="Permalink to &quot;失败场景&quot;">​</a></h3><ul><li><p>在使用 <code>set</code> 的过程中，有时会出现明明按照 <code>api</code> 设置了新属性，但是却没有更新视图的情况。</p></li><li><p>有的时候会感觉到莫名其妙，甚至一度以为是 <code>Vue</code> 的 <code>bug</code> 。。。</p></li><li><p>如果对 <code>set</code> 方法的原理了解清楚了的话，就不会有这种情况了。</p></li><li><p>set 相关源码如下：</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Set a property on an object. Adds the new property and</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * triggers change notification if the property doesn&#39;t</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * already exist.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isUndef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrimitive</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">))) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Cannot set reactive property on undefined, null, or primitive value: </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">}\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断 target 是否是数组，key 是否是合法的索引</span></span>
<span class="line"><span style="color:#A6ACCD;">  if </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Array.isArray(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> &amp;&amp; isValidArrayIndex</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    target.length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 通过 splice 对key位置的元素进行替换</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// splice 在 array.js 进行了响应化的处理</span></span>
<span class="line"><span style="color:#A6ACCD;">    target.splice(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val);</span></span>
<span class="line"><span style="color:#A6ACCD;">    return val;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果 key 在对象中已经存在直接赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">(key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    target</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] = val;</span></span>
<span class="line"><span style="color:#F07178;">    return val;</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取 target 中的 observer 对象</span></span>
<span class="line"><span style="color:#F07178;">  const ob = (target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> any)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__ob__;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果 target 是 vue 实例或者 $data 直接返回</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_isVue </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (ob </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> ob</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vmCount)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">      warn(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Avoid adding reactive properties to a Vue instance or its root $data </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> +</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">at runtime - declare it upfront in the data option.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      );</span></span>
<span class="line"><span style="color:#F07178;">    return val;</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果 ob 不存在，target 不是响应式对象直接赋值</span></span>
<span class="line"><span style="color:#F07178;">  if (!ob) {</span></span>
<span class="line"><span style="color:#F07178;">    target[key] = val;</span></span>
<span class="line"><span style="color:#F07178;">    return val;</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 把 key 设置为响应式属性</span></span>
<span class="line"><span style="color:#F07178;">  defineReactive(ob.value, key, val);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 发送通知</span></span>
<span class="line"><span style="color:#F07178;">  ob.dep.notify();</span></span>
<span class="line"><span style="color:#F07178;">  return val;</span></span>
<span class="line"><span style="color:#F07178;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><ul><li>为什么会出现 <code>set</code> 不更新视图的情况，从源码中我们就看的很清楚了</li><li>就是因为我们的属性在 <code>set</code> 之前已经被赋值了，并且是非响应式方式赋值的。</li><li>这种赋值通常都是我们非主动、无意识下的赋值。</li></ul>`,10),o=[e];function t(r,c,i,y,F,D){return n(),a("div",null,o)}const b=s(p,[["render",t]]);export{C as __pageData,b as default};
