import{_ as T,H as r,o as n,c,C as l,a,J as t,E as i,V as o}from"./chunks/framework.364d6ed5.js";const g=JSON.parse('{"title":"HTTP 相关","description":"","frontmatter":{},"headers":[],"relativePath":"internet/http.md","filePath":"internet/http.md","lastUpdated":1692978539000}'),h={name:"internet/http.md"},p=o("",14),d=l("code",null,"Connection: close",-1),s=l("strong",null,"浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接。",-1),P=l("h3",{id:"队头阻塞与不成熟的-http-管线化",tabindex:"-1"},[a("队头阻塞与不成熟的 HTTP 管线化 "),l("a",{class:"header-anchor",href:"#队头阻塞与不成熟的-http-管线化","aria-label":'Permalink to "队头阻塞与不成熟的 HTTP 管线化"'},"​")],-1),u=l("strong",null,"队头阻塞",-1),H=l("blockquote",null,[l("p",null,"HTTP/1.1 试图通过管线化的技术来解决队头阻塞的问题。HTTP/1.1 中的管线化是指将多个 HTTP 请求整批提交给服务器的技术，虽然可以整批发送请求，不过服务器依然需要根据请求顺序来回复浏览器的请求。")],-1),_=l("h3",{id:"域名分片",tabindex:"-1"},[a("域名分片 "),l("a",{class:"header-anchor",href:"#域名分片","aria-label":'Permalink to "域名分片"'},"​")],-1),b=l("strong",null,"在 HTTP/1.1 中的请求头中增加了一个 Host 字段，用来表明当前的域名地址，这样服务器就可以根据不同的 Host 值做不同的处理。",-1),m=o("",21);function f(C,k,q,E,S,x){const e=r("font");return n(),c("div",null,[p,l("p",null,[a("它的特点是在一个 TCP 连接上可以传输多个 HTTP 请求，只要浏览器或者服务器没有明确断开连接，那么该 TCP 连接会一直保持。HTTP 的持久连接可以有效减少 TCP 建立连接和断开连接的次数，这样的好处是减少了服务器额外的负担，并提升整体 HTTP 的请求时长。 持久连接在 HTTP/1.1 中是默认开启的，所以你不需要专门为了持久连接去 HTTP 请求头设置信息，如果你不想要采用持久连接，可以在 HTTP 请求头中加上 "),d,a("。目前"),t(e,{color:"LightSalmon"},{default:i(()=>[s]),_:1})]),P,l("p",null,[a("虽然 HTTP/1.1 增加了持久连接的能力，减少了 TCP 连接和断开的次数，但是它还是要等待前一个 HTTP 请求返回之后才能进行下一个 HTTP 请求。想象一下如果某个 HTTP 请求因为某些原因没有及时返回，那么这个请求之后的所有 HTTP 请求都会被堵住，这就是常说的"),t(e,{color:"red"},{default:i(()=>[u]),_:1}),a("问题。")]),H,_,l("p",null,[a("在 HTTP/1.0 中，每个域名都绑定了一个唯一的 IP 地址，因此一个服务器只能为一个域名服务。随着虚拟主机技术的发展，实现了在一台物理主机上绑定多个虚拟主机，每个虚拟主机对应一个单独的域名，这些域名共用一个 IP 地址。因此，"),t(e,{color:"LightSlateGray"},{default:i(()=>[b]),_:1})]),m])}const I=T(h,[["render",f]]);export{g as __pageData,I as default};
