import{_ as e,o as a,c as t,V as o}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"Vue组件","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/vuecomponent.md","filePath":"Vue/vuecomponent.md","lastUpdated":1686880555000}'),i={name:"Vue/vuecomponent.md"},r=o('<h1 id="vue组件" tabindex="-1">Vue组件 <a class="header-anchor" href="#vue组件" aria-label="Permalink to &quot;Vue组件&quot;">​</a></h1><h2 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h2><h3 id="父子组件通信" tabindex="-1">父子组件通信 <a class="header-anchor" href="#父子组件通信" aria-label="Permalink to &quot;父子组件通信&quot;">​</a></h3><h4 id="props-和-emit" tabindex="-1">props 和 $emit <a class="header-anchor" href="#props-和-emit" aria-label="Permalink to &quot;props 和 $emit&quot;">​</a></h4><ul><li>父组件通过<code>props</code>向子组件传递数据</li><li>子组件通过<code>$emit</code>事件向父组件发送消息，将自己的数据传递给父组件。</li></ul><h4 id="provide-inject" tabindex="-1">provide inject <a class="header-anchor" href="#provide-inject" aria-label="Permalink to &quot;provide inject&quot;">​</a></h4><ul><li>这对选项需要一起使用，父组件使用 provide 向下提供数据，其下所有子组件都可以通过inject注入，不管中间隔了多少代，都可以注入多个来自不同父级提供的数据。</li><li>provide 选项是一个对象或返回一个对象的函数，该对象包含可注入其子孙的属性。</li><li>inject 选项是一个字符串数组，或一个对象。</li></ul><h3 id="非父子组件通信" tabindex="-1">非父子组件通信 <a class="header-anchor" href="#非父子组件通信" aria-label="Permalink to &quot;非父子组件通信&quot;">​</a></h3><h4 id="通过自定义事件-eventbus事件总线" tabindex="-1">通过自定义事件(eventBus事件总线) <a class="header-anchor" href="#通过自定义事件-eventbus事件总线" aria-label="Permalink to &quot;通过自定义事件(eventBus事件总线)&quot;">​</a></h4><ul><li>这个方法是通过创建一个空的 vue 实例，当做 $emit 事件的处理中心（事件总线），通过他来触发以及监听事件，方便的实现了任意组件间的通信，包含父子，兄弟，隔代组件。</li></ul>',10),n=[r];function l(c,d,s,u,h,p){return a(),t("div",null,n)}const v=e(i,[["render",l]]);export{m as __pageData,v as default};
