import{_ as s,o as n,c as a,V as l}from"./chunks/framework.92369faf.js";const C=JSON.parse('{"title":"装饰器","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/decorator.md","filePath":"typescript/decorator.md","lastUpdated":1692717238000}'),p={name:"typescript/decorator.md"},e=l(`<h1 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h1><h2 id="装饰器初尝" tabindex="-1">装饰器初尝 <a class="header-anchor" href="#装饰器初尝" aria-label="Permalink to &quot;装饰器初尝&quot;">​</a></h2><ul><li><p>装饰器为我们在类的声明及成员上添加标注提供了一种方式。 <code>Javascript</code> 里的装饰器目前处在 建议征集的第二阶段，但在 <code>TypeScript</code> 里已做为一项实验性特性予以支持。</p></li><li><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。装饰器使用 <code>@expression</code> 这种形式 <code>expression</code> 求值后必须为一个函数，该函数会在运行时被调用（不管类是否实例化都会第一时间调用），被装饰者的信息（根据被装饰着不同而略有不同）将做为参数传入 <code>expression</code> 求值后的函数中。</p></li><li><p>正所谓百闻不如一见，不再赘述装饰器的概念，而是直接写一个装饰器来感受一下。</p></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 类装饰器使用！！！这里被装饰者是类Example</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">classDecor</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里为了this.text不报错，声明了所有属性都为合法属性</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">print</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类装饰器声明！！！可以看到被装饰者的信息作为参数传入了，这里类装饰器的参数是被装饰类的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">classDecor</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ClassDecor is called</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Class is decorated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">New Example instance</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Example</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出什么？Bingo！</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ClassDecor is called</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// New Example instance</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Class is decorated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="info custom-block"><p class="custom-block-title">代码解析</p><ul><li>这里我们定义了一个名为 <code>classDecor</code> 的函数，该函数被<code>@</code>符号修饰并放置在 <code>Example</code> 类之前做为一个典型的类装饰器使用。</li><li>在代码的最后，我们通过调用 <code>new Example</code> 生成一个 <code>Example</code> 实例并调用其上的 <code>print</code> 方法。</li><li>可以看到由于 <code>classDecor</code> 类装饰器的存在，实例化后的 <code>print</code> 中访问到了 <code>text</code> 这个并未在 <code>Example</code> 类中定义的属性并成功打印了它的值 <code>Class is decorated</code>。</li><li>另外，由于类装饰器会在程序运行的第一时间被调用，因此 <code>ClassDecor is called</code> 会先于 <code>New Example instance</code> 被打印出来，也正是因为这个原因我们无法将 <code>text</code> 属性挂载在 <code>Example</code> 实例上（运行 <code>classDecor</code> 时还不存在该实例），取而代之我们将其挂载载了其原型链上。</li></ul></div>`,5),o=[e];function c(t,r,i,y,D,F){return n(),a("div",null,o)}const A=s(p,[["render",c]]);export{C as __pageData,A as default};
