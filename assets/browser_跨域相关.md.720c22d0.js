import{_ as s,o as a,c as l,V as o}from"./chunks/framework.92369faf.js";const n="/jinghao-docs/assets/image.9ec9dde7.png",A=JSON.parse('{"title":"跨域相关","description":"","frontmatter":{},"headers":[],"relativePath":"browser/跨域相关.md","filePath":"browser/跨域相关.md","lastUpdated":1692892408000}'),e={name:"browser/跨域相关.md"},p=o('<h1 id="跨域相关" tabindex="-1">跨域相关 <a class="header-anchor" href="#跨域相关" aria-label="Permalink to &quot;跨域相关&quot;">​</a></h1><h2 id="什么是跨域" tabindex="-1">什么是跨域 <a class="header-anchor" href="#什么是跨域" aria-label="Permalink to &quot;什么是跨域&quot;">​</a></h2><p><strong>跨域 Cross-Origin</strong> 是指在浏览器环境下，当一个网页的 <code>JavaScript</code> 代码试图访问不同源 <code>origin</code> 的资源时所产生的安全限制。在这里，&quot;源&quot; 是指一个网页的协议、主机和端口的组合，也就是网页的来源地址。</p><p>跨域问题是由于浏览器的<strong>同源策略 Same-Origin Policy</strong>所引起的。同源策略是一种安全策略，它限制了一个网页在浏览器中从一个不同源的网页获取资源或与其进行交互。</p><p>具体来说，以下情况会触发跨域问题：</p><ul><li><p><span style="color:#8470FF;"><strong>协议不同</strong></span> ：如果两个网页的协议不同，例如一个是 <code>HTTP</code>，另一个是 <code>HTTPS</code>，就会产生跨域问题。</p></li><li><p><span style="color:#8470FF;"><strong>主机不同</strong></span>：如果两个网页的主机部分（域名或 <code>IP</code> 地址）不同，就会产生跨域问题。</p></li><li><p><span style="color:#8470FF;"><strong>端口不同</strong></span>：如果两个网页的端口不同，就会产生跨域问题。</p></li></ul><p>当浏览器中的 <code>JavaScript</code> 代码尝试从一个网页获取数据、发起 <code>AJAX</code> 请求、或者访问其他网页的内容时，如果目标资源的协议、主机、端口任何一个与当前网页不同，浏览器就会拒绝这种跨域行为。</p><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><p>解决跨域问题涉及多种方法，这里列举几种常用的解决方案：</p><h3 id="cors-跨域资源共享" tabindex="-1">CORS（跨域资源共享） <a class="header-anchor" href="#cors-跨域资源共享" aria-label="Permalink to &quot;CORS（跨域资源共享）&quot;">​</a></h3><p><strong>CORS（跨域资源共享）</strong>: <code>CORS</code> 是一种由服务器设置的机制，允许服务器在响应中声明允许哪些源可以访问其资源。通过在服务器端配置相应的 <code>CORS</code> 头部，可以解决跨域问题。常见的 <code>CORS</code> 头部包括 <code>Access-Control-Allow-Origin</code>、<code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code> 等。使用 <code>CORS</code>，服务器可以明确告知浏览器允许跨域访问，从而允许跨域请求。</p><h4 id="什么情况下需要-cors" tabindex="-1">什么情况下需要 CORS？ <a class="header-anchor" href="#什么情况下需要-cors" aria-label="Permalink to &quot;什么情况下需要 CORS？&quot;">​</a></h4><ul><li>由 XMLHttpRequest 或 Fetch API 发起的跨源 HTTP 请求。</li><li>Web 字体（CSS 中通过 @font-face 使用跨源字体资源）</li><li>webGL 贴图、drawImage 等 canvas 操作、css background-image 等。</li></ul><h4 id="cors-原理" tabindex="-1">CORS 原理 <a class="header-anchor" href="#cors-原理" aria-label="Permalink to &quot;CORS 原理&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">概念</p><p>跨源资源共享标准新增了一组 HTTP 标头字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（例如 Cookie 和 HTTP 认证相关数据）。</p></div><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><ul><li>简单请求不会触发预检请求</li><li>若请求满足所有下述条件，则该请求可视为简单请求：</li></ul><ol><li><p>使用以下 HTTP 方法之一：</p><ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul></li><li><p><code>Content-Type</code> 头部只能为以下几种之一：</p><ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li><li><p>请求中的头部信息（Headers）只能是简单请求头，简单请求头包括：</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Last-Event-ID</code></li><li><code>Content-Type</code>（仅限于上述几种特定的值）</li><li><code>Range</code>（只允许简单的范围标头值 如 bytes=256- 或 bytes=127-255）</li></ul></li></ol><blockquote><p>Firefox 还没有将 Range 实现为安全的请求标头。参见 <a href="https://fetch.spec.whatwg.org/#simple-range-header-value" target="_blank" rel="noreferrer">bug 1733981</a>。</p></blockquote><ol start="4"><li><p>如果请求是使用 <code>XMLHttpRequest</code> 对象发出的，在返回的 <code>XMLHttpRequest.upload</code> 对象属性上没有注册任何事件监听器；也就是说，给定一个 <code>XMLHttpRequest</code> 实例 <code>xhr</code>，没有调用 <code>xhr.upload.addEventListener()</code>，以监听该上传请求。</p></li><li><p>请求中没有使用 <code>ReadableStream</code> 对象。</p></li></ol><h4 id="预检请求" tabindex="-1">预检请求 <a class="header-anchor" href="#预检请求" aria-label="Permalink to &quot;预检请求&quot;">​</a></h4><ul><li><p>非简单请求会触发预检请求</p></li><li><p>发送预检请求 <code>Preflight request</code> 是在使用跨域资源共享 <code>CORS</code> 时的一种行为。当客户端（通常是浏览器）执行跨域请求时，即请求的目标域与当前页面所在的域不一致时，浏览器会先发送一个预检请求来确认服务器是否支持跨域请求。</p></li><li><p>预检请求是一个 <code>OPTIONS</code> 请求，用于向服务器查询是否允许发送实际的请求（例如 <code>GET</code>、<code>POST</code>）以及请求所包含的自定义头部等信息。预检请求的目的是保护服务器资源的安全性，确保服务器知道允许哪些跨域请求。</p></li></ul><h5 id="预检请求发生的情况如下" tabindex="-1">预检请求发生的情况如下： <a class="header-anchor" href="#预检请求发生的情况如下" aria-label="Permalink to &quot;预检请求发生的情况如下：&quot;">​</a></h5><ul><li><span style="color:#8470FF;"><strong>自定义头部</strong></span>：如果在请求中使用了自定义的头部信息（例如使用 <code>X-Requested-With</code> 或 <code>Authorization</code> 等头部），浏览器会发送预检请求来确认服务器是否支持这些头部。</li></ul><div class="tip custom-block"><p class="custom-block-title">实例💥💥💥</p><p>我在公司的微前端项目本地开发中发现的一个实际问题：主应用是 <code>http://localhost:7700</code>，子应用是 <code>http://localhost:7701</code>，当我在主应用中加载子应用时控制台就会报跨域的错误信息，错误信息如下图所示。</p></div><p><img src="'+n+`" alt="Alt text"></p><div class="info custom-block"><p class="custom-block-title">分析</p><p>产生这个报错问题的原因如下：</p><ul><li>首先 <code>qiankun</code> 主应用 <code>http://localhost:7700</code> 加载子应用 <code>http://localhost:7701</code> 因为端口不一样导致了跨域问题</li><li>同时因为主应用中执行了公司的 <code>SDK</code> ，<code>SDK</code> 会在请求头中添加 <code>l-requested-mac</code> 等头部信息，所有接口都会加上，全部都不是简单请求了</li><li>而子应用 <code>http://localhost:7701</code> 中的 <code>webpack</code> 中的 <code>devServer</code> 下的 <code>headers</code> 中并没有配置 <code>Access-Control-Allow-Headers</code> 的值</li><li>所以浏览器就会报跨域的错误信息了。</li></ul><p>解决方法也很简单，在 <code>headers</code> 中加下 <code>Access-Control-Allow-Headers: *</code> 就可以了。</p></div><ul><li><p>非简单请求：对于非简单请求，例如使用 <code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等方法，或者 <code>Content-Type</code> 为 <code>application/json</code> 等特殊情况，浏览器也会发送预检请求。</p></li><li><p>跨域请求允许规则：如果服务器配置了 <code>CORS</code> 规则，并设置了 <code>Origin</code> 允许列表，当请求的 <code>Origin</code> 不在允许列表中时，浏览器也会发送预检请求。</p></li></ul><h5 id="预检请求的过程如下" tabindex="-1">预检请求的过程如下： <a class="header-anchor" href="#预检请求的过程如下" aria-label="Permalink to &quot;预检请求的过程如下：&quot;">​</a></h5><ul><li><p>浏览器先发送一个 <code>OPTIONS</code> 请求（预检请求）到目标服务器。</p></li><li><p>服务器收到预检请求后，根据请求的头部信息和跨域配置，判断是否允许实际请求。</p></li><li><p>如果服务器允许实际请求，会在响应中包含相应的 <code>CORS</code> 头部信息，并发送给浏览器。</p></li><li><p>浏览器根据预检请求的响应确认服务器是否支持跨域请求。如果服务器确认支持，浏览器才会发送实际的请求。</p></li></ul><div class="info custom-block"><p class="custom-block-title">注意</p><p>需要注意的是，预检请求会在实际请求之前发送，因此可能会<span style="color:#8470FF;"><strong>增加一些额外的网络请求</strong></span>。在开发中，如果涉及跨域请求，可以适当设置服务器的 <code>CORS</code> 配置来避免频繁的预检请求。</p></div><h3 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h3><ul><li><p><code>JSONP</code> 是一种通过添加 <code>&lt;script&gt;</code> 标签动态加载数据的方法。由于 <code>&lt;script&gt;</code> 标签的跨域特性，<code>JSONP</code> 可以绕过浏览器的同源策略。服务器端需要支持 <code>JSONP</code> 请求，并在响应中返回包裹在函数调用中的 JSON 数据。然后，前端可以通过定义一个回调函数来接收返回的数据。</p></li><li><p>主要就是利用了 <code>script</code> 标签的<code>src</code>没有跨域限制来完成的。</p></li></ul><h4 id="实例如下" tabindex="-1">实例如下： <a class="header-anchor" href="#实例如下" aria-label="Permalink to &quot;实例如下：&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    window.jsonpCallback = function (res) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8080/jsonp?id=1&amp;cb=jsonpCallback</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>注意的点就是回调函数的名称需要前后端确认好，如这里的 <code>cb</code>。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Koa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">koa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Koa</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/jsonp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">)[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">listen 8080...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><a href="https://www.jianshu.com/p/88bb82718517" target="_blank" rel="noreferrer">参考链接</a></p><h3 id="nginx-代理" tabindex="-1">Nginx 代理 <a class="header-anchor" href="#nginx-代理" aria-label="Permalink to &quot;Nginx 代理&quot;">​</a></h3><ul><li><strong>Nginx 代理</strong>: 如果您在使用 <code>Nginx</code> 作为 <code>Web</code> 服务器，可以通过配置 <code>Nginx</code> 代理来解决跨域问题。设置代理服务器来转发请求并将响应返回给前端，就可以绕过跨域限制。</li></ul><h2 id="html-能实现跨域的标签" tabindex="-1">html 能实现跨域的标签 <a class="header-anchor" href="#html-能实现跨域的标签" aria-label="Permalink to &quot;html 能实现跨域的标签&quot;">​</a></h2><ul><li><p><code>&lt;img&gt;</code>：用于显示图像。可以加载来自其他域的图像并在页面上显示。</p></li><li><p><code>&lt;script&gt;</code>：用于加载外部 JavaScript 文件。可以引入其他域上的 JavaScript 脚本文件，并在页面中使用。</p></li><li><p><code>&lt;link&gt;</code>：用于加载外部样式表。可以引入其他域上的 CSS 文件，以应用样式到页面上。</p></li><li><p><code>&lt;audio&gt;</code>：用于嵌入音频内容。可以加载其他域上的音频文件并在页面上播放。</p></li><li><p><code>&lt;video&gt;</code>：用于嵌入视频内容。可以加载其他域上的视频文件并在页面上播放。</p></li><li><p><code>&lt;iframe&gt;</code>：用于嵌入另一个文档。可以加载其他域上的网页并在页面中嵌入显示。</p></li></ul><div class="info custom-block"><p class="custom-block-title">注意</p><p>这些标签在浏览器中有相应的安全例外，允许加载和展示来自其他域的资源。 但是，请注意，虽然这些标签允许在页面上展示跨域资源 但对于执行一些读取操作（例如使用<code>getImageData</code>方法）或执行一些需要敏感权限的操作，仍然会受到同源策略的限制。 为了更好地处理跨域资源，确保安全性和符合同源策略的要求，可以考虑使用服务器端代理或配置跨域资源共享（CORS）来实现跨域请求。</p></div>`,43),c=[p];function t(r,i,d,D,F,y){return a(),l("div",null,c)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
